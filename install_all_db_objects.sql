/**********************************************
**
** Author: Pavel Glebov
** Date: 05-2021
** Version: 0.9
**
** This all in one install script contains all DB objects
**
**********************************************/



CREATE TABLE AM_DEVELOPER_AUDIT_LOG_DUM 
   (	APPLICATION_ID NUMBER, 
	DEVELOPER VARCHAR2(255 BYTE), 
	AUDIT_DATE DATE, 
	UPDATED DATE, 
	AUDIT_ACTION VARCHAR2(1 BYTE), 
	PAGE_ID NUMBER, 
	PAGE_NAME VARCHAR2(255 BYTE), 
	COMPONENT VARCHAR2(30 BYTE), 
	COMPONENT_NAME VARCHAR2(4000 BYTE), 
	OBJECT_NAME VARCHAR2(4000 BYTE), 
	SECURITY_GROUP_ID NUMBER NOT NULL ENABLE, 
	FLOW_TABLE_PK NUMBER
   );
CREATE TABLE AM_APP_BACKUPS_DUMM 
   (	ID NUMBER, 
	SECURITY_GROUP_ID NUMBER NOT NULL ENABLE, 
	REVISION NUMBER, 
	BACKUP_TYPE VARCHAR2(30 BYTE), 
	BACKUP_STATUS VARCHAR2(30 BYTE), 
	APPLICATION_ID NUMBER NOT NULL ENABLE, 
	APPLICATION_NAME VARCHAR2(255 BYTE), 
	DESCRIPTION VARCHAR2(4000 BYTE), 
	MANIFEST CLOB, 
	OBJECT_ID NUMBER, 
	LOCKED_BY VARCHAR2(255 BYTE), 
	LOCKED_ON DATE, 
	CREATED_BY VARCHAR2(255 BYTE), 
	CREATED_ON DATE, 
	LAST_UPDATED_BY VARCHAR2(255 BYTE), 
	LAST_UPDATED_ON DATE, 
	BLOB_CONTENT BLOB, 
	FILENAME VARCHAR2(400 BYTE), 
	MIME_TYPE VARCHAR2(255 BYTE)
   );


CREATE GLOBAL TEMPORARY TABLE am_scope (
 call_id          NUMBER,
 procedure_name   VARCHAR2(100 CHAR),
 scope            VARCHAR2(500 CHAR)
) ON COMMIT DELETE ROWS;CREATE TABLE am_exports (
  export_id     NUMBER PRIMARY KEY,
  filename      VARCHAR2(1000 char),
  content       CLOB,
  exp_date      DATE
);

create sequence am_export_id_seq;


--DROP TABLE am_lines;
CREATE TABLE am_lines (
  export_id   NUMBER NOT NULL,
  line_no     NUMBER NOT NULL,
  text        VARCHAR2(4000 CHAR),
  CONSTRAINT am_lines_pk  PRIMARY KEY(line_no,export_id)  
  --CONSTRAINT am_lines_fk1  FOREIGN KEY(export_id) REFERENCES am_exports(export_id)
) NOLOGGING;

--drop table am_tree_procedures CASCADE CONSTRAINTS;

CREATE TABLE am_tree_procedures (
  call_id          NUMBER,
  parent_call_id   NUMBER,
  parent_apex_id   NUMBER,
  export_id        NUMBER,
  procedure_name   VARCHAR2(100 CHAR),
  scope            VARCHAR2(500 CHAR),
  begin_line_no    NUMBER,
  end_line_no      NUMBER,
  pos_from         NUMBER,
  pos_to           NUMBER,
  sort_value       VARCHAR2(30 CHAR),
  display_value    VARCHAR2(300 CHAR),
  apex_id          NUMBER,
  change_flag      VARCHAR2(1),
  CONSTRAINT am_tree_procedures_pk  PRIMARY KEY(call_id,export_id)
  --CONSTRAINT am_tree_procedures_fk1  FOREIGN KEY(export_id) REFERENCES am_exports(export_id),
  --CONSTRAINT am_tree_procedures_fk2  FOREIGN KEY(parent_call_id,export_id) REFERENCES am_tree_procedures(call_id,export_id)
) NOLOGGING;
--ORGANIZATION INDEX 

CREATE INDEX AM_TREE_PROCEDURES_I1 ON AM_TREE_PROCEDURES(EXPORT_ID,APEX_ID);
CREATE INDEX AM_TREE_PROCEDURES_I2 ON AM_TREE_PROCEDURES(PARENT_CALL_ID,EXPORT_ID,PROCEDURE_NAME);

create sequence am_call_seq CACHE 1000 NOORDER;

--DROP TABLE am_tree_parameters;

CREATE TABLE am_tree_parameters (
  call_id          NUMBER,
  export_id        NUMBER,
  parameter_name   VARCHAR2(30 CHAR),
  data_clob        CLOB,
  data             VARCHAR2(4000),
  display_data     VARCHAR2(300 char),
  begin_line_no    NUMBER,
  end_line_no      NUMBER,
  parameter_type   VARCHAR2(1 CHAR),
  CONSTRAINT am_tree_parameters_pf  PRIMARY KEY(call_id,export_id,parameter_name)
  --CONSTRAINT am_tree_parameters_fk1  FOREIGN KEY(call_id,export_id) REFERENCES am_tree_procedures(call_id,export_id) DEFERRABLE INITIALLY DEFERRED
)  NOLOGGING;
--ORGANIZATION INDEX


CREATE TABLE am_api_procedures (
  procedure_name             VARCHAR2(30 CHAR) primary key,
  parent_parameter_name      VARCHAR2(30 CHAR),
  parent_parameter_default   VARCHAR2(30 CHAR),
  display_parameter_name     VARCHAR2(30 CHAR),
  order_parameter_name       VARCHAR2(30 CHAR),
  parent_parameter_name_alt  VARCHAR2(30 CHAR),
  parent_procedure_name      VARCHAR2(30 CHAR),
  scope                      VARCHAR2(100 CHAR),
  scope_parameter_name       VARCHAR2(30 CHAR)  
);

CREATE TABLE am_execution_points (
  execution_point      VARCHAR2(30 CHAR) primary key,  
  scope                VARCHAR2(200 CHAR),
  sort_value           NUMBER
);

--DROP TABLE AM_TEMPLATE_OPT_GROUP;

CREATE GLOBAL TEMPORARY TABLE AM_TEMPLATE_OPT_GROUP 
(	EXPORT_ID NUMBER NOT NULL, 
	THEME_ID NUMBER NOT NULL, 
	DISPLAY_NAME VARCHAR2(30 CHAR) NOT NULL, 
	TEMPLATE_OPT_GROUP_APEX_ID NUMBER NOT NULL
   )   ON COMMIT DELETE ROWS ;

CREATE UNIQUE INDEX AM_TEMPLATE_OPT_GROUP_UI1 ON AM_TEMPLATE_OPT_GROUP(EXPORT_ID, TEMPLATE_OPT_GROUP_APEX_ID) ;
--DROP TABLE am_template_options;

CREATE GLOBAL TEMPORARY TABLE am_template_options (
    export_id   NUMBER not null,
    theme_id    NUMBER not null,
    display_name  varchar2(30 CHAR) not null,
    css_class     varchar2(255 CHAR) not null,
    template_apex_id number,
    template_type varchar2(255 CHAR) not null,
    template_opt_group_apex_id number
) ON COMMIT DELETE ROWS;

CREATE INDEX am_template_options_ui1 ON am_template_options (template_opt_group_apex_id,export_id);


--DROP TABLE am_templates;

CREATE GLOBAL TEMPORARY TABLE am_templates (
    export_id   NUMBER not null,
    template_apex_id number not null, 
    header clob,
    box clob,
    footer clob
) ON COMMIT DELETE ROWS;

CREATE UNIQUE INDEX am_templates_ui1 ON am_templates (template_apex_id,export_id);

--DROP TABLE am_templates_display_points;

CREATE GLOBAL TEMPORARY TABLE am_templates_display_points (
    export_id   NUMBER not null,
    display_name  varchar2(255 CHAR) not null,
    placeholder    varchar2(255 CHAR) not null,    
    template_apex_id number not null,
    entry_point      number,
    distance         number,
    sort_order       number
) ON COMMIT DELETE ROWS;

CREATE UNIQUE INDEX am_templates_display_poi_ui1 ON am_templates_display_points (template_apex_id,placeholder,export_id);

--DROP TABLE am_themes;

CREATE GLOBAL TEMPORARY TABLE am_themes (
    export_id   NUMBER not null,
    theme_id    NUMBER not null,
    default_page_template_id  number,
    default_dialog_template_id  number
) ON COMMIT DELETE ROWS;

CREATE UNIQUE INDEX am_themes_ui1 ON am_themes (theme_id,export_id);

SET DEFINE OFF;
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_DATA_LOAD_UNLOAD',null,null,'P_DATA_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLASH_CHART','P_REGION_ID','G_REGION_ID','P_CHART_TITLE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLASH_CHART_SERIES','P_CHART_ID',null,'P_SERIES_NAME','P_SERIES_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLOW_PROCESS',null,'G_FLOW_ID','P_PROCESS_NAME','P_PROCESS_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_ICON_BAR_ITEM',null,'G_FLOW_ID','P_ICON_IMAGE_ALT','P_ICON_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_INSTALL_OBJECT',null,'G_FLOW_ID','P_OBJECT_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_INSTALL_SCRIPT','P_INSTALL_ID','G_FLOW_ID','P_NAME','P_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LANGUAGE_MAP','P_PRIMARY_LANGUAGE_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LIST_OF_VALUES',null,'G_FLOW_ID','P_LOV_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LIST_OF_VALUES_COLS','P_LOV_ID','G_LOV_ID',null,null,null,'CREATE_LIST_OF_VALUES',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MODEL_PAGE_COLS','P_MODEL_REGION_ID',null,'P_COLUMN_DISPLAY_NAME','P_COLUMN_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_PROCESS',null,'G_PAGE_ID','P_PROCESS_NAME','P_PROCESS_SEQUENCE',null,null,'#PROCESSES#','P_PROCESS_POINT');
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUG_TMPL_DISPLAY_POINT',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QB_SAVED_COND',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RESTFUL_PARAM',null,null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RT$CLIENTS',null,null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RT$USER_SESSIONS',null,null,'P_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_TEMPLATE',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_THEME_FILE',null,'G_FLOW_ID','P_FILE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WEB_SOURCE_SYNC_STEP','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_APP_SUG_OBJECTS','P_WS_APP_ID',null,'P_OBJECT_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_COLUMN','P_WORKSHEET_ID',null,'P_COLUMN_IDENTIFIER','P_DATA_GRID_FORM_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_CONDITION','P_REPORT_ID',null,'P_CONDITION_DISPLAY','P_HIGHLIGHT_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_LOV','P_WORKSHEET_ID',null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_WORKSHEET','P_REGION_ID',null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_AUTOMATION_ACTION','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CALENDAR_TEMPLATE',null,'G_FLOW_ID','P_INTERNAL_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CARD_ACTION','P_PAGE_ID','G_PAGE_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CREDENTIAL',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LOAD_TABLE_LOOKUP',null,'G_FLOW_ID','P_LOOKUP_TABLE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MAIL_QUEUE',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_DA_ACTION','P_EVENT_ID','G_PAGE_ID','P_ACTION','P_ACTION_SEQUENCE',null,'CREATE_PAGE_DA_EVENT',null,'P_EVENT_RESULT');
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_DA_EVENT',null,'G_PAGE_ID','P_NAME','P_EVENT_SEQUENCE',null,null,'2Dynamic Actions/Events','P_BIND_EVENT_TYPE');
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PASSWORD_HISTORY',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PKG_APP_MAP',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PREFERENCES$',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QUERY_OBJECT','P_QUERY_ID',null,'P_OBJECT_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_REPORT_LAYOUT','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RESTFUL_HANDLER',null,null,'P_METHOD',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_ROW_TEMPLATE_PATCH',null,null,'P_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_TEMPLATE_OPTION',null,'G_FLOW_ID','P_DISPLAY_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_TEMPLATE_OPT_GROUP',null,'G_FLOW_ID','P_DISPLAY_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_TOPLEVEL_TAB',null,'G_FLOW_ID','P_TAB_NAME','P_TAB_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_USER_INTERFACE',null,'G_FLOW_ID','P_DISPLAY_NAME','P_DISPLAY_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_COLUMN','P_WORKSHEET_ID','G_WORKSHEET_ID','P_COLUMN_LABEL','P_DISPLAY_ORDER',null,'CREATE_WORKSHEET','Columns',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_APP_BUILD_PREF',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_AUTH_SETUP',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_BUG',null,'G_FLOW_ID','P_BUG_DESCRIPTION',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLOW_COMPUTATION',null,'G_FLOW_ID','P_COMPUTATION','P_COMPUTATION_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT_COLUMN','P_VIEW_ID',null,'P_COLUMN_ID','P_DISPLAY_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT_VIEW','P_REPORT_ID',null,'P_VIEW_TYPE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_JET_CHART','P_REGION_ID','G_REGION_ID','P_TITLE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_JET_CHART_AXIS','P_CHART_ID','G_PAGE_ID','P_TITLE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LIST',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN',null,'G_FLOW_ID','P_DISPLAY_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QS_SAVED_MODEL',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RT$APPROVAL_PRIVS',null,null,'P_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SCRIPT','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SW_RESULTS',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_THEME_IMAGE','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_THEME_STYLE',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_COL_GROUP','P_WORKSHEET_ID',null,'P_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_BUILD_OPTION',null,'G_FLOW_ID','P_BUILD_OPTION_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_COMBINED_FILE',null,'G_FLOW_ID','P_COMBINED_FILE_URL',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_INSTALL_CHECK','P_INSTALL_ID','G_FLOW_ID','P_NAME','P_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MENU',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MODELS',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_GROUP',null,'G_FLOW_ID','P_GROUP_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN_EVENT',null,'G_FLOW_ID','P_DISPLAY_NAME',null,null,'CREATE_PLUGIN','Events',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_REGION_COLUMN','P_REGION_ID','G_REGION_ID','P_NAME','P_DISPLAY_SEQUENCE',null,'CREATE_WORKSHEET',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_ROW_TEMPLATE',null,'G_FLOW_ID','P_INTERNAL_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SW_SQL_CMDS',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SW_STMTS',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_THEME_DISPLAY_POINT',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_USER_GROUPS',null,null,'P_GROUP_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_COL_GROUP','P_WORKSHEET_ID','G_WORKSHEET_ID','P_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_PARAMETERS','P_WS_OPERS_ID',null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_PIVOT_SORT','P_PIVOT_ID',null,'P_SORT_COLUMN_NAME','P_SORT_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_ACL_ROLE','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CALENDAR',null,'G_PAGE_ID','P_PLUG_NAME','P_PLUG_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CARD','P_REGION_ID','G_REGION_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CLICKTHRU_LOG$',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLOW_ITEM',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_JSTREE','P_REGION_ID','G_REGION_ID','P_TREE_HINT_TEXT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LOAD_TABLE',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_BRANCH_ARGS','P_FLOW_STEP_BRANCH_ID',null,'P_TARGET','P_BRANCH_ARG_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_TMPL_DISPLAY_POINT',null,'G_FLOW_ID','P_NAME',null,null,'CREATE_TEMPLATE',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN_FILE',null,'G_FLOW_ID','P_FILE_NAME',null,null,'G_VARCHAR2_TABLE',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QB_SAVED_TABS',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_REGION_COLUMN_GROUP','P_REGION_ID','G_REGION_ID','P_HEADING',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_REMOTE_SERVER',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RT$APPROVALS',null,null,'P_USER_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SHARED_QUERY_STMNT',null,'G_FLOW_ID','P_SQL_STATEMENT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_TRANSLATION',null,'G_PAGE_ID','P_TRANSLATE_FROM_TEXT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WEB_SOURCE_OPERATION','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_CATEGORY','P_WORKSHEET_ID','G_WORKSHEET_ID','P_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_GROUP_BY','P_WORKSHEET_ID','G_WORKSHEET_ID','P_GROUP_BY_COLUMNS',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_PIVOT_AGG','P_PIVOT_ID',null,'P_COLUMN_NAME','P_DISPLAY_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSPACE_STATIC_FILE',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_OPERATIONS','P_WS_ID',null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_APP_SETTING','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_AUTHENTICATION',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_AUTOMATION','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_BUTTON_TEMPLATES',null,'G_FLOW_ID','P_TEMPLATE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_EMAIL_TEMPLATE','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT_CHART_COL','P_COLUMN_ID',null,'P_COLUMN_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IMAGE',null,'G_FLOW_ID','P_IMAGE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MAIL_ATTACHMENTS',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MENU_TEMPLATE',null,'G_FLOW_ID','P_NAME',null,null,'CREATE_MENU',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN_ITEM_FILTER',null,'G_FLOW_ID','P_DISPLAY_NAME',null,null,'CREATE_PLUGIN','Items Filter',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUG_TEMPLATE',null,'G_FLOW_ID','P_PAGE_PLUG_TEMPLATE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_POPUP_LOV_TEMPLATE',null,'G_FLOW_ID','P_PAGE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PROVISION_SERICE_MOD',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QB_SAVED_JOIN',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_REGION_RPT_COLS',null,'G_REGION_ID','P_QUERY_COLUMN_NAME','P_COLUMN_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RT$PENDING_APPROVALS',null,null,'P_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WEB_SOURCE_PARAM','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_COMPUTATION','P_WORKSHEET_ID','G_WORKSHEET_ID','P_DB_COLUMN_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_APP',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_AUTH_SETUP',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CLICKTHRU_LOG2$',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_DATA_PROFILE','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_DATA_PROFILE_COL','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_DYNAMIC_TRANSLATION',null,'G_FLOW_ID','P_LANGUAGE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_ENTRY_POINT',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLASH_CHART5','P_REGION_ID','G_REGION_ID','P_CHART_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT','P_INTERACTIVE_GRID_ID','G_PAGE_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_INTERACTIVE_GRID','P_REGION_ID','G_REGION_ID','P_REGION_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_ITEM_GROUP','P_FLOW_STEP_ID','G_PAGE_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QB_SAVED_QUERY',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QUERY_CONDITION','P_QUERY_ID',null,'P_CONDITION',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RS_PRIV_GRP',null,null,'P_PRIVILEGE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SW_DETAIL_RESULTS',null,null,null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WEB_SERVICE',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_CONDITION','P_WORKSHEET_ID','G_WORKSHEET_ID','P_NAME','P_HIGHLIGHT_SEQUENCE',null,'CREATE_WORKSHEET_RPT',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_NOTIFY','P_WORKSHEET_ID','G_WORKSHEET_ID','P_EMAIL_SUBJECT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_CHART_SERIES_ATTR','P_SERIES_ID','G_REGION_ID','P_A001',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_DATA_LOAD_BAD_LOG',null,null,'P_LOAD_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLASH_CHART5_SERIES','P_CHART_ID',null,'P_SERIES_NAME','P_SERIES_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MENU_OPTION','P_MENU_ID','G_MENU_ID','P_SHORT_NAME','P_OPTION_SEQUENCE',null,'CREATE_MENU',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FLOW',null,null,'P_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_GENERIC_ATTR','P_REGION_ID','G_REGION_ID','P_ATTRIBUTE_VALUE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_ICON_BAR',null,'G_FLOW_ID','P_ICON_BAR_TEXT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT_COMPUTE','P_COLUMN_ID',null,'P_LABEL',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_JET_CHART_SERIES','P_CHART_ID','G_PAGE_ID','P_NAME','P_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LIST_TEMPLATE',null,'G_FLOW_ID','P_INTERNAL_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MESSAGE','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MODEL_PAGES','P_MODEL_ID',null,'P_PAGE_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_MODEL_PAGE_REGIONS','P_REGION_ID',null,'P_REGION_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_HELP',null,'G_FLOW_ID','P_HELP_TEXT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_PLUG',null,'G_PAGE_ID','P_PLUG_NAME','P_PLUG_DISPLAY_SEQUENCE',null,null,'#REGIONS#','P_PLUG_DISPLAY_POINT');
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_VALIDATION',null,'G_PAGE_ID','P_VALIDATION_NAME','P_VALIDATION_SEQUENCE',null,null,'3Processing./2Validating/4Validations',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN_STD_ATTRIBUTE',null,'G_FLOW_ID','P_NAME',null,null,'CREATE_PLUGIN','Std. Attributes',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QUERY_COLUMN','P_QUERY_ID',null,'P_COLUMN_ALIAS','P_COLUMN_GROUP_BY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_REPORT_REGION',null,'G_PAGE_ID','P_NAME','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RESTFUL_PRIV',null,null,'P_LABEL',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SECURITY_SCHEME',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SHARED_QUERY',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_TREE',null,'G_FLOW_ID','P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WEB_SOURCE_COMP_PARAM','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WEB_SOURCE_MODULE','P_FLOW_ID','G_FLOW_ID',null,null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_PIVOT','P_WORKSHEET_ID','G_WORKSHEET_ID','P_PIVOT_COLUMNS',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_COL_VALIDATION','P_WORKSHEET_ID',null,'P_VALIDATION_NAME','P_VALIDATION_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_PROCESS_PARMS_MAP','P_PARAMETER_ID',null,'P_PARM_VALUE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT_HIGHLIGHT','P_VIEW_ID',null,'P_NAME','P_EXECUTION_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN_ATTR_VALUE',null,'G_FLOW_ID','P_DISPLAY_VALUE','P_DISPLAY_SEQUENCE',null,'CREATE_PLUGIN_ATTRIBUTE',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_TAB',null,'G_FLOW_ID','P_TAB_NAME','P_TAB_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_LOV_ENTRIES','P_LOV_ID',null,'P_ENTRY_TEXT','P_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_APP_STATIC_FILE',null,'G_FLOW_ID','P_FILE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LOAD_TABLE_RULE','P_LOAD_TABLE_ID','G_FLOW_ID','P_RULE_NAME','P_RULE_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN_ATTRIBUTE',null,'G_FLOW_ID','P_PROMPT','P_ATTRIBUTE_SEQUENCE',null,'CREATE_PLUGIN','Attributes',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_REPORT_COLUMNS','P_REGION_ID','G_REGION_ID','P_COLUMN_ALIAS','P_COLUMN_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE',null,'G_FLOW_ID','P_NAME','0',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_ITEM','P_ITEM_PLUG_ID','G_PAGE_ID','P_NAME','P_ITEM_SEQUENCE',null,'CREATE_PAGE_PLUG','1Items',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_FIELD_TEMPLATE',null,'G_FLOW_ID','P_TEMPLATE_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_BUTTON','P_BUTTON_PLUG_ID','G_PAGE_ID','P_BUTTON_NAME','P_BUTTON_SEQUENCE',null,'CREATE_PAGE_PLUG','#BUTTONS#','P_BUTTON_POSITION');
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_THEME',null,'G_FLOW_ID','P_THEME_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET','P_REGION_ID','G_REGION_ID','P_NAME',null,null,'CREATE_PAGE_PLUG',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_COMPUTATION',null,'G_PAGE_ID','P_COMPUTATION','P_COMPUTATION_SEQUENCE',null,null,'#COMPUTATIONS#','P_COMPUTATION_POINT');
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_RPT','P_WORKSHEET_ID','G_WORKSHEET_ID','P_NAME','P_REPORT_SEQ',null,'CREATE_WORKSHEET',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PLUGIN_SETTING',null,'G_FLOW_ID','P_PLUGIN',null,null,'CREATE_PLUGIN','Settings',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('G_VARCHAR2_TABLE',null,null,null,null,null,'CREATE_PLUGIN','Files',null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_STATIC_LOV_DATA','P_LOV_ID','G_LOV_ID','P_LOV_DISP_VALUE','P_LOV_DISP_SEQUENCE',null,'CREATE_LIST_OF_VALUES',null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_PAGE_BRANCH',null,'G_PAGE_ID','P_BRANCH_NAME','P_BRANCH_SEQUENCE',null,null,'#BRANCHES#','P_BRANCH_POINT');
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_COMPUTATION','P_REPORT_ID',null,'P_COLUMN_IDENTIFIER',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_DATA_GRID','P_WORKSHEET_ID',null,'P_WEBSHEET_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_GROUP_BY','P_REPORT_ID',null,'P_GROUP_BY_COLUMNS',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_NOTIFY','P_WORKSHEET_ID',null,'P_EMAIL_SUBJECT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_PAGE','P_PARENT_PAGE_ID',null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_PIVOT','P_WORKSHEET_ID',null,'P_PIVOT_COLUMNS',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_PIVOT_AGG','P_PIVOT_ID',null,'P_DB_COLUMN_NAME','P_DISPLAY_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WS_RPT','P_WORKSHEET_ID',null,'P_NAME','P_REPORT_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_APP_COMMENTS',null,'G_FLOW_ID','P_APP_COMMENT',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_ENTRY_POINT_ARGS','P_FLOW_ENTRY_POINT_ID',null,'P_FLOW_ENTRY_POINT_ID','P_ENTRY_POINT_ARG_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT_AGGREGATE','P_COLUMN_ID',null,'P_FUNCTION',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_IG_REPORT_FILTER','P_VIEW_ID',null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_INSTALL_BUILD_OPTION','P_INSTALL_ID','G_FLOW_ID','P_BUILD_OPT_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_LIST_ITEM','P_LIST_ID',null,'P_LIST_ITEM_LINK_TEXT','P_LIST_ITEM_DISPLAY_SEQUENCE',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_QUERY_DEFINITION','P_REGION_ID','G_REGION_ID','P_REGION_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RESTFUL_MODULE',null,null,'P_NAME',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RESTFUL_TEMPLATE',null,null,'P_ETAG_TYPE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RT$CLIENT_PRIVILEGES',null,null,'P_ID',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_RT$ERRORS',null,null,'P_SQL_ERROR_MESSAGE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_SHORTCUT',null,'G_FLOW_ID','P_SHORTCUT_NAME','P_SHORTCUT_CONSIDERATION_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_WORKSHEET_PIVOT_SORT','P_PIVOT_ID',null,'P_SORT_COLUMN_NAME','P_SORT_SEQ',null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('CREATE_INSTALL','P_FLOW_ID','G_FLOW_ID','P_INSTALL_MESSAGE',null,null,null,null,null);
Insert into AM_API_PROCEDURES (PROCEDURE_NAME,PARENT_PARAMETER_NAME,PARENT_PARAMETER_DEFAULT,DISPLAY_PARAMETER_NAME,ORDER_PARAMETER_NAME,PARENT_PARAMETER_NAME_ALT,PARENT_PROCEDURE_NAME,SCOPE,SCOPE_PARAMETER_NAME) values ('IMPORT_BEGIN',null,null,null,null,null,null,null,null);

SET DEFINE OFF;
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BEFORE_VALIDATION','3Processing./2Validating',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BEFORE_PROCESSING','3Processing./0Before Processing',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('AFTER_BOX_BODY','1Rendering/3Post-Rendering/1After Regions',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('AFTER_FOOTER','1Rendering/3Post-Rendering/3After Footer',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('AFTER_HEADER','1Rendering/1Pre-Rendering/3After Header',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('ON_SUBMIT_BEFORE_COMPUTATION','3Processing./1After Submit',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('AFTER_PROCESSING','3Processing./4After Processing',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('AFTER_SUBMIT','3Processing./3Processing',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BEFORE_BOX_BODY','1Rendering/1Pre-Rendering/4Before Regions',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BEFORE_FOOTER','1Rendering/3Post-Rendering/2Before Footer',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BEFORE_HEADER','1Rendering/1Pre-Rendering/2Before Header',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('ON_DEMAND','3Processing./4Ajax Callback',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('ON_NEW_INSTANCE','1Rendering/1Pre-Rendering/1New Session',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BODY_1','1Rendering/2Regions/Body 1',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BODY_2','1Rendering/2Regions/Body 2',null);
Insert into AM_EXECUTION_POINTS (EXECUTION_POINT,SCOPE,SORT_VALUE) values ('BODY_3','1Rendering/2Regions/Body 3',null);

create or replace force view am_app_backups as 
select * from am_app_backups_dumm;create or replace force view am_developer_audit_log
as select * from am_app_backups_dumm;CREATE OR REPLACE PACKAGE am_tree AS

  --ROOT_PARENT_ID constant number  default -1;  

  TYPE t_refcur IS REF CURSOR;
  TYPE t_script_rec IS RECORD (
    line_no   am_lines.line_no%TYPE,
    text      am_lines.text%TYPE,
    pos_from    NUMBER,
    pos_to      NUMBER
  ); 

  TYPE t_app_properties IS RECORD (
    app_id  number,
    theme_id number,
    page_id number,
    page_mode am_tree_parameters.data%TYPE,
    page_template am_tree_parameters.data%TYPE
  );
  
  TYPE t_debug_info IS RECORD (
    line_no  number
  );
  
  debug_info t_debug_info;
  
  app_properties t_app_properties;
  
  type t_paramets is table of am_tree_parameters.data%type index by am_tree_parameters.parameter_name%TYPE;
  
  type t_clob_paramets is table of am_tree_parameters.data_clob%type index by am_tree_parameters.parameter_name%TYPE;

  type t_template_opt_group is table of number index by varchar2(20);
  
  template_opt_group t_template_opt_group; 
  
  PROCEDURE fill_tree(
    p_export_id IN   am_exports.export_id%TYPE
  );
  
 function get_procedure_name_call_exists(
    p_procedure_name am_tree_procedures.procedure_name%TYPE
  ) return am_tree_procedures.call_id%TYPE;

END am_tree;
/
CREATE OR REPLACE PACKAGE am_utils AS

  type t_line is record (
   line_no     NUMBER,
   text        VARCHAR2(4000 CHAR),
   pos_from    NUMBER,
   pos_to      NUMBER
  );

  type t_lines is table of t_line;

  function split_into_lines_pipeline( 
    c IN  CLOB
  ) return t_lines pipelined;
  
  FUNCTION get_parameter_name (
    p_text IN VARCHAR2
  ) RETURN VARCHAR2; 

  FUNCTION to_num(
    p_str in varchar2,
    p_line_no in am_lines.line_no%TYPE
  ) return  number;

  function get_parameter(
    p_parameter in am_tree_parameters.parameter_name%TYPE,
    p_parameters in am_tree.t_paramets
  )
  return am_tree_parameters.data%type;
  
  procedure save_template_opt_group(
    p_export_id in am_exports.export_id%TYPE,
    p_theme_id in am_template_opt_group.theme_id%TYPE,
    p_display_name in am_template_opt_group.display_name%TYPE,
    p_template_opt_group_apex_id in am_template_opt_group.template_opt_group_apex_id%TYPE
  );
  
  procedure save_template_option(
    p_export_id IN am_template_options.export_id%TYPE,
    p_theme_id in am_template_options.theme_id%TYPE,
    p_display_name IN am_template_options.display_name%TYPE,
    p_css_class IN am_template_options.css_class%TYPE,
    p_template_apex_id IN am_template_options.template_apex_id%TYPE,
    p_template_type IN am_template_options.template_type%TYPE,
    p_template_opt_group_apex_id IN am_template_options.template_opt_group_apex_id%TYPE
  );
  
  procedure save_theme(
    p_export_id in am_exports.export_id%TYPE,
    p_theme_id in am_themes.theme_id%TYPE,
    p_default_page_template in am_themes.default_page_template_id%TYPE,
    p_default_dialog_template in am_themes.default_dialog_template_id%TYPE
  );
  
  procedure save_template(
    p_export_id in am_exports.export_id%TYPE,
    p_template_apex_id in am_templates.template_apex_id%TYPE, 
    p_header  in am_templates.header%TYPE,
    p_box  in am_templates.box%TYPE,
    p_footer  in am_templates.footer%TYPE
  );
  
  procedure save_templates_display_points(
    p_export_id in am_exports.export_id%TYPE,
    p_display_name in am_templates_display_points.display_name%TYPE,
    p_placeholder in am_templates_display_points.placeholder%TYPE,      
    p_template_apex_id in am_templates.template_apex_id%TYPE
  );
   
   procedure delete_tree_data;   
   
   function detect_language(p_str in varchar2)
   return varchar2;
   
   function get_clob_from_lines (
    p_export_id in am_exports.export_id%TYPE,
    p_begin_line_no in am_lines.line_no%TYPE, 
    p_end_line_no in am_lines.line_no%TYPE
  )
  return clob;
  
  
  function get_export_date(
    p_export_id in am_exports.export_id%TYPE
  ) return date;


  
END am_utils;
/
CREATE OR REPLACE PACKAGE am_api_utils AS

  PROCEDURE fill_api_procedures_table;
  
  FUNCTION get_apex_schema return varchar2;
  
END am_api_utils;
/
CREATE OR REPLACE PACKAGE am_app AS

  function get_tree_query(
    p_show_changes_only in varchar2,
    p_developer in varchar2,
    p_standard_tracker_flag in varchar2
  ) return varchar2;
  
  function b_acc_apex_developer_audit_log
  return boolean;
  
  function c_acc_apex_developer_audit_log
  return varchar2;
  
  function b_eba_stds_test_validations
  return boolean;
  
  function get_backup_date(p_backup_id in number)
  return date;

  function get_source(
    p_call_id am_tree_procedures.call_id%TYPE,
    p_export_id am_exports.export_id%TYPE
  )
  return clob;

END am_app;
/
CREATE OR REPLACE PACKAGE am_compare AS

  PROCEDURE_DELETED constant char(1) default 'D';
  PROCEDURE_NEW constant char(1) default 'I';
  CHILD_HAS_CHANGES constant char(1) default 'A';
  DIFFERENT_PARAMETERS constant char(1) default 'P';
  

  procedure compare_trees(
    p_left_export_id    IN am_exports.export_id%TYPE,
    p_right_export_id    IN am_exports.export_id%TYPE
  ); 


END am_compare;
/
create or replace package am_comparsions_api is

   function upload_export (
    p_source in varchar2,
    p_filename   in am_exports.filename%TYPE,
    p_app_id   in number,
    p_public_reports in varchar2,
    p_private_reports in varchar2,
    p_report_subscriptions in varchar2,
    p_translation in varchar2,
    p_comments in varchar2,
    p_original_ids in varchar2,
    p_backup_id in number
  ) return  am_exports.export_id%TYPE;
end am_comparsions_api;
/
create or replace PACKAGE am_hierarchy AS

  function get_parent(
    p_export_id      IN am_exports.export_id%TYPE,
    p_parent_procedure_name IN am_tree_procedures.procedure_name%TYPE,
    p_local_scope    IN am_tree_procedures.scope%TYPE,
    p_scope_par_val  IN am_tree_procedures.procedure_name%TYPE,
    p_parent_call_id IN am_tree_procedures.parent_call_id%TYPE,
    p_parent_apex_id IN am_tree_procedures.apex_id%TYPE    
  ) return am_tree_procedures.call_id%TYPE;
  
  function  prepare_scope_path(
    p_export_id      IN am_exports.export_id%TYPE,
    p_scope          IN am_tree_procedures.scope%TYPE,
    p_parent_call_id IN am_tree_procedures.parent_call_id%TYPE
  ) return am_tree_procedures.call_id%TYPE;
  
  function get_region_display_point(
    p_export_id in am_exports.export_id%TYPE,
    p_placeholder in am_templates_display_points.placeholder%TYPE,      
    p_template_apex_id in am_templates.template_apex_id%TYPE
  ) return varchar2;
  
  function get_parent_region_call_id (
    p_export_id in am_exports.export_id%TYPE,
    p_parent_region_apex_id in am_tree_procedures.parent_apex_id%TYPE
  )  
  return am_tree_procedures.call_id%TYPE;

  procedure align_create_page_procedure(
    p_call_id in am_tree_procedures.call_id%TYPE,
    p_export_id in am_exports.export_id%TYPE,
    p_parent_call_id in am_tree_procedures.call_id%TYPE
  );
END am_hierarchy;
/
CREATE OR REPLACE PACKAGE  am_standard_tracker AS

  PROCEDURE prepare_results (
    p_application_id     IN   NUMBER
    --p_apx_bldr_session   IN   VARCHAR2,
  );  
  
  function get_report(
    p_apex_id in number, 
    p_application_id in number,
    p_showonly in varchar2
  )
  return clob;
  
END am_standard_tracker;
/
create or replace PACKAGE BODY am_utils AS

  --http://mkramar.blogspot.com/2015/09/split-oracle-clob-into-lines-fast-way.html
  ------------------------------------------------------------------------------
  function split_into_lines_pipeline( 
    c IN  CLOB
  ) return t_lines pipelined 
  is
   rez apex_t_varchar2;
   v_pos     number := 0;
  begin
   rez := apex_string.split(c,chr(10));
   for i in 1..rez.count loop
     pipe row(t_line(i,rez(i),v_pos,v_pos + nvl(length(rez(i)),0)));
     v_pos := v_pos + nvl(length(rez(i)),0) + 1;
   end loop;
   
  end split_into_lines_pipeline;
  ------------------------------------------------------------------------------

  FUNCTION get_parameter_name (
    p_text IN VARCHAR2
  ) RETURN VARCHAR2 
  IS
  BEGIN
    RETURN substr(upper(ltrim(regexp_substr(p_text, '[,]?p_[[:alnum:]_]+', 1, 1, 'i'), ',')),1,30);
  END get_parameter_name;
  ------------------------------------------------------------------------------
  
  FUNCTION to_num(
    p_str in varchar2,
    p_line_no in am_lines.line_no%TYPE
  ) return  number
  is
  begin
    return to_number(p_str);
  exception
     when others then
        raise_application_error(-20001,'to_num p_str='||p_str||' at line='||p_line_no||' '||SQLERRM);
  end to_num;
  ------------------------------------------------------------------------------

  function get_parameter(
    p_parameter in am_tree_parameters.parameter_name%TYPE,
    p_parameters in am_tree.t_paramets
  )
  return am_tree_parameters.data%type
  is
  begin
    return p_parameters(p_parameter);
  exception
     when no_data_found then
        return '';
  end get_parameter;  
  ------------------------------------------------------------------------------

  procedure save_template_opt_group(
    p_export_id in am_exports.export_id%TYPE,
    p_theme_id in am_template_opt_group.theme_id%TYPE,
    p_display_name in am_template_opt_group.display_name%TYPE,
    p_template_opt_group_apex_id in am_template_opt_group.template_opt_group_apex_id%TYPE
  )
  is
  begin
    insert into am_template_opt_group (
      export_id,
      theme_id,
      display_name,
      template_opt_group_apex_id
    ) values (
      p_export_id, --export_id,
      p_theme_id, --p_theme_id
      p_display_name,
      p_template_opt_group_apex_id
    );  
  end save_template_opt_group;
  ------------------------------------------------------------------------------  

  procedure save_template_option(
    p_export_id IN am_template_options.export_id%TYPE,
    p_theme_id in am_template_options.theme_id%TYPE,
    p_display_name IN am_template_options.display_name%TYPE,
    p_css_class IN am_template_options.css_class%TYPE,
    p_template_apex_id IN am_template_options.template_apex_id%TYPE,
    p_template_type IN am_template_options.template_type%TYPE,
    p_template_opt_group_apex_id IN am_template_options.template_opt_group_apex_id%TYPE
  )
  is
  begin
    insert into am_template_options (
      export_id,
      theme_id,
      display_name,
      css_class,
      template_apex_id,
      template_type,
      template_opt_group_apex_id
    ) values (
      p_export_id,
      p_theme_id,
      p_display_name,
      p_css_class,
      p_template_apex_id,
      p_template_type,
      p_template_opt_group_apex_id
    );  
  end save_template_option;
  ------------------------------------------------------------------------------

  procedure save_theme(
    p_export_id in am_exports.export_id%TYPE,
    p_theme_id in am_themes.theme_id%TYPE,
    p_default_page_template in am_themes.default_page_template_id%TYPE,
    p_default_dialog_template in am_themes.default_dialog_template_id%TYPE
  )
  is
  begin
    insert into am_themes (
      export_id,
      theme_id,
      default_page_template_id,
      default_dialog_template_id
    ) values (
      p_export_id, --export_id,
      p_theme_id, --p_theme_id
      p_default_page_template,
      p_default_dialog_template
    );  
  end save_theme;
  ------------------------------------------------------------------------------

  procedure save_template(
    p_export_id in am_exports.export_id%TYPE,
    p_template_apex_id in am_templates.template_apex_id%TYPE, 
    p_header  in am_templates.header%TYPE,
    p_box  in am_templates.box%TYPE,
    p_footer  in am_templates.footer%TYPE
  )
  is
  begin
    insert into am_templates (
      export_id,
      template_apex_id, 
      header,
      box,
      footer
    ) values (
      p_export_id,
      p_template_apex_id, 
      p_header,
      p_box,
      p_footer
    );  
  end save_template;  
  ------------------------------------------------------------------------------

  procedure save_templates_display_points(
    p_export_id in am_exports.export_id%TYPE,
    p_display_name in am_templates_display_points.display_name%TYPE,
    p_placeholder in am_templates_display_points.placeholder%TYPE,      
    p_template_apex_id in am_templates.template_apex_id%TYPE
  )
  is
    v_header_distance number;
    v_box_distance number;
    v_footer_distance number; 
    v_entry_point am_templates_display_points.entry_point%TYPE; 
    v_distance am_templates_display_points.distance%TYPE;
  begin    
    select nvl(dbms_lob.instr(header,'#'||p_placeholder||'#'),0) as header_distance,
           nvl(dbms_lob.instr(box,'#'||p_placeholder||'#'),0) as box_distance,
           nvl(dbms_lob.instr(footer,'#'||p_placeholder||'#'),0) as footer_distance
    into v_header_distance,
         v_box_distance,
         v_footer_distance  
    from am_templates
    where export_id = p_export_id
      and template_apex_id = p_template_apex_id;

    if v_header_distance > 0 then 
      v_entry_point := 1;
      v_distance := v_header_distance;
    elsif v_box_distance > 0 then 
      v_entry_point := 2;
      v_distance := v_box_distance;
    elsif v_footer_distance > 0 then
      v_entry_point := 3;
      v_distance := v_footer_distance;
    else
      v_entry_point := null;
      v_distance := null;
    end if;

    insert into am_templates_display_points (
      export_id,
      display_name,
      placeholder,    
      template_apex_id,
      entry_point,
      distance,
      sort_order
    ) values (
      p_export_id,
      p_display_name,
      p_placeholder,    
      p_template_apex_id,
      v_entry_point,
      v_distance,
      1
    );  

    if p_placeholder = 'BODY' then
     for a in 1..3 loop
       insert into am_templates_display_points (
         export_id,
         display_name,
         placeholder,    
         template_apex_id,
         entry_point,
         distance,
         sort_order
        ) values (
          p_export_id,
          'Body '||a,
          'BODY_'||a,    
          p_template_apex_id,
          v_entry_point,
          v_distance + a,
          1
        );
      end loop;  
    end if;

    for i in (
      select placeholder, 
             row_number() over(order by entry_point nulls last, distance nulls last ) as rn 
      from am_templates_display_points
      where export_id = p_export_id
        and template_apex_id = p_template_apex_id) 
    loop
      update am_templates_display_points 
      set sort_order = i.rn 
      where export_id = p_export_id
        and template_apex_id = p_template_apex_id
        and placeholder = i.placeholder;
    end loop;

  end save_templates_display_points;
  ------------------------------------------------------------------------------

  procedure delete_tree_data
  is
  begin
    for i in (
      select export_id 
      from am_exports
      where exp_date < sysdate - 2/24
    ) loop
       DELETE FROM am_lines where export_id = i.export_id;
       DELETE FROM am_tree_parameters where export_id = i.export_id;
       DELETE FROM am_tree_procedures where export_id = i.export_id;
       delete from am_exports where export_id = i.export_id;
    end loop;
  end delete_tree_data;

  ------------------------------------------------------------------------------
  function detect_language(p_str in varchar2)
  return varchar2
  is
   v_str varchar2(100);
  begin
    v_str := UPPER(p_str);
    if instr(v_str,'DECLARE ') > 0 or instr(v_str,'SELECT ') > 0 then
     return 'sql';
    elsif instr(v_str,'VAR ') > 0 or instr(v_str,'==') > 0 then
      return 'javascript';
    elsif instr(v_str,'/>') > 0 then
      return 'javascript';
   else
      return 'plaintext';
   end if;   

  end detect_language;
  ------------------------------------------------------------------------------

  --https://gist.github.com/vlsi/052424856512f80137989c817cb8f046  
  procedure app(v_clob in out nocopy clob, v_vc in out nocopy varchar2, v_app varchar2) is    
  begin
      v_vc := v_vc || v_app;
      exception when VALUE_ERROR then
      if v_clob is null then
        v_clob := v_vc;
      else
        dbms_lob.writeappend(v_clob, length(v_vc), v_vc);
      end if;
      v_vc := v_app;
      v_clob := v_clob || v_vc;
  end;
  ------------------------------------------------------------------------------

  function get_clob_from_lines (
    p_export_id in am_exports.export_id%TYPE,
    p_begin_line_no in am_lines.line_no%TYPE, 
    p_end_line_no in am_lines.line_no%TYPE
  )
  return clob
  is
    v_vc varchar2(32767);
    v_clob clob;
  begin
    for i in (
      select text 
      from am_lines
      where line_no between p_begin_line_no and p_end_line_no
        and export_id = p_export_id
    ) loop
      --app(v_clob,v_vc,i.text);
      v_clob := v_clob||i.text||chr(10); 
    end loop;
    return v_clob || v_vc;
  end get_clob_from_lines;  
  ------------------------------------------------------------------------------

  function get_export_date(
    p_export_id in am_exports.export_id%TYPE
  ) return date
  is
  begin
    for i in (
      select * 
      from am_lines
      where export_id = p_export_id
        and line_no < 100
    ) 
    loop
      if i.text like '--   Date and Time:%' then
        return to_date(replace(i.text,'--   Date and Time:',''),'hh24:mi Day Month dd, yyyy');
      end if;
    end loop;

    return null;
  exception
    when others then
      return null;    
  end get_export_date;
  ------------------------------------------------------------------------------

END am_utils;
/
CREATE OR REPLACE PACKAGE BODY am_api_utils AS  
 
  cursor export_procedures (
    p_apex_schema In VARCHAR2
  )
  is
  select distinct object_name as procedure_name,
         subprogram_id,
         object_id
  from all_arguments aa
  where package_name = 'WWV_FLOW_API'
  and owner = p_apex_schema
  and object_name like 'CREATE%'
   --exclude functions - can have the same name as procedures 
  and ((not exists (select * 
                  from all_arguments aa2
                  where aa2.object_id = aa.object_id
                    and aa2.subprogram_id = aa.subprogram_id
                    and package_name = 'WWV_FLOW_API'
                    and owner = p_apex_schema
                    and argument_name is null)                    
      --select only procedures with P_ID parameter 
      and exists (select * 
                  from all_arguments aa3
                  where aa3.object_id = aa.object_id
                    and aa3.subprogram_id = aa.subprogram_id
                    and package_name = 'WWV_FLOW_API'
                    and owner = p_apex_schema
                    and argument_name = 'P_ID')
       ) or  object_name = 'CREATE_FLOW');

  CURSOR procedure_declaration (
    p_procedure_name IN VARCHAR2,
    p_apex_schema In VARCHAR2 
  ) IS
  WITH src AS (
    SELECT text,
           line
    FROM all_source
    WHERE owner = p_apex_schema
          AND name = 'WWV_FLOW_API'
          AND type = 'PACKAGE'
  ), strt AS (
    SELECT MAX(line) line_begin
    FROM src
    WHERE instr(upper(text), 'PROCEDURE') > 0
          AND ( instr(upper(text), p_procedure_name || ' ') > 0
                OR instr(upper(text), p_procedure_name || '(') > 0 )
  ), fnsh AS (
    SELECT MIN(line) AS line_end
    FROM src,
         strt
    WHERE src.line > strt.line_begin
          AND instr(text, ';') > 0
  )
  SELECT CASE
    WHEN
      line = fnsh.line_end
    THEN
      replace(text, ';',' ')
    ELSE text
           end text
  FROM src,
       strt,
       fnsh
  WHERE line BETWEEN strt.line_begin AND fnsh.line_end
  ORDER BY line;
  ------------------------------------------------------------------------------
  
  function get_apex_schema
  return varchar2
  is
    v_apex_schema varchar2(30);
  begin
    select max(u1.username) as current_apex_user
    into v_apex_schema
    from all_users u1 
    where u1.username like 'APEX%' 
      and REGEXP_LIKE (substr(u1.username,'6',1), '^[0-9]*$');
      
    return v_apex_schema;  
  end get_apex_schema;
  ------------------------------------------------------------------------------
  
  procedure add_api_procedure_declaration (
    p_procedure_name           IN VARCHAR2,
    p_parent_parameter_name    IN VARCHAR2,
    p_parent_parameter_default IN VARCHAR2
  ) 
  is
  begin
    update am_api_procedures
    set parent_parameter_name = nvl(p_parent_parameter_name,parent_parameter_name),
        parent_parameter_default = nvl(p_parent_parameter_default,parent_parameter_default)
    where procedure_name = p_procedure_name;
    if SQL%ROWCOUNT = 0 then
      INSERT INTO am_api_procedures (
        procedure_name,
        parent_parameter_name,
        parent_parameter_default
      ) VALUES (
        p_procedure_name,
        p_parent_parameter_name,
        p_parent_parameter_default
      );
    end if;
  end add_api_procedure_declaration;
  ------------------------------------------------------------------------------
  
 
  PROCEDURE get_parent_parameter (
    p_procedure_name IN VARCHAR2,
    p_apex_schema IN VARCHAR2,
    o_parent_parameter_name OUT varchar2,
    o_parent_parameter_default OUT varchar2
  ) 
  IS
    v_parent_parameter_name am_api_procedures.parent_parameter_name%TYPE;
    v_parent_parameter_default am_api_procedures.parent_parameter_default%TYPE;
    v_parameter_weight number default 0;
    
    procedure set_default(
      p_parent_parameter_default in varchar2,
      p_parent_parameter_name in varchar2,
      p_weight  in number
    ) 
    is
    begin
      if p_weight > v_parameter_weight then
        v_parameter_weight := p_weight;
        v_parent_parameter_name := p_parent_parameter_name;
        v_parent_parameter_default := p_parent_parameter_default;
      end if;
    end set_default;
  BEGIN
    FOR i IN procedure_declaration(
      p_procedure_name => p_procedure_name,
      p_apex_schema => p_apex_schema 
    ) LOOP
      IF instr(i.text, ' wwv_flow.g_flow_id') > 0 THEN
        set_default('G_FLOW_ID',am_utils.get_parameter_name(i.text),1);
      ELSIF instr(i.text, ' g_page_id',2) > 0 THEN
        set_default('G_PAGE_ID',am_utils.get_parameter_name(i.text),3);
      ELSIF instr(i.text, ' g_region_id') > 0 THEN
        set_default('G_REGION_ID',am_utils.get_parameter_name(i.text),4);
      ELSIF instr(i.text, ' g_worksheet_id',5) > 0 THEN
        set_default('G_WORKSHEET_ID',am_utils.get_parameter_name(i.text),6);
      ELSIF instr(i.text, ' g_lov_id',7) > 0 THEN
        set_default('G_LOV_ID',am_utils.get_parameter_name(i.text),8);
      ELSIF instr(i.text, ' g_menu_id',9) > 0 THEN
        set_default('G_MENU_ID',am_utils.get_parameter_name(i.text),10);
      ELSE
        NULL;
      END IF;
    END LOOP;
    
    o_parent_parameter_name := v_parent_parameter_name; 
    o_parent_parameter_default := v_parent_parameter_default;
  END get_parent_parameter;
  ------------------------------------------------------------------------------  
  
  PROCEDURE fill_api_procedures_table
  IS
    v_apex_schema varchar2(30);
    v_parent_parameter_name am_api_procedures.parent_parameter_name%TYPE;
    v_parent_parameter_default am_api_procedures.parent_parameter_default%TYPE;
  BEGIN
    v_apex_schema := get_apex_schema;
  
    FOR i IN export_procedures(v_apex_schema) LOOP
      get_parent_parameter (
        p_procedure_name => i.procedure_name,
        p_apex_schema => v_apex_schema,
        o_parent_parameter_name => v_parent_parameter_name,
        o_parent_parameter_default => v_parent_parameter_default
      ); 
      add_api_procedure_declaration (
       p_procedure_name           => i.procedure_name,
       p_parent_parameter_name    => v_parent_parameter_name,
       p_parent_parameter_default => v_parent_parameter_default
      ); 
    END LOOP;
  END fill_api_procedures_table;

END am_api_utils;
/
CREATE OR REPLACE PACKAGE BODY am_app AS

 function get_tree_query(
    p_show_changes_only in varchar2,
    p_developer in varchar2,
    p_standard_tracker_flag in varchar2
  ) return varchar2
  is
    v_subquery varchar2(2000);
  begin
   if (p_developer is null and nvl(p_standard_tracker_flag,'A') = 'A') or nvl(p_show_changes_only,'N') = 'N' then
     return  q'[select tp.status, 
             tp."LEVEL", 
             tp.title,
             case 
              when tp.change_flag = 'P' then 'fa fa-exclamation-triangle am-parent'
              when tp.change_flag = 'I' then 'fa fa-plus-square am-insert'
              when tp.change_flag = 'D' then 'fa fa-minus-square am-deleted'        
              when tp.change_flag = 'A' then 'fa fa-folder am_changed'
              else ''
             end icon,
             tp.call_id value, 
             tp.scope as tooltip, 
             tp.link 
      from (
      select case when connect_by_isleaf = 1 then 0
                  when level = 1             then 1
                  else                           -1
             end as status, 
             level, 
             case 
               when display_value is not null then procedure_name||'('||display_value||')' 
               else procedure_name
             end  title, 
             null as icon, 
             call_id, 
             scope, 
             change_flag,
             'javascript:setLeaf('||nvl(begin_line_no,0)||','||nvl(end_line_no,0)||','||call_id||','''||apex_id||''')' as link 
      from (select * from am_tree_procedures
      where export_id = :P100_LEFT_EXPORT_ID 
      ) 
      start with parent_call_id is null
      connect by prior call_id = parent_call_id
      order siblings by to_number(nvl(sort_value,begin_line_no))
      ) tp
      where (change_flag is not null and nvl(:P100_SHOW_CHANGES_ONLY_LEFT,'N')='Y') or nvl(:P100_SHOW_CHANGES_ONLY_LEFT,'N') !='Y'
      ]';  
    else
      if p_developer is not null then
         v_subquery := ' select flow_table_pk
                      from apex_developer_audit_log
                      where application_id = :P310_APP_ID_DESTINATION
                        and developer = :P100_DEVELOPER 
                        and updated between :P100_DATE_FROM and :P100_DATE_TO
                       ';
      end if;
      if p_standard_tracker_flag is not null then
        if v_subquery is not null then 
          v_subquery := '
            INTERSECT
          ';
        end if;  
        v_subquery := v_subquery||q'[ select n002 as apex_id 
        from apex_collections ac left outer join 
            eba_stds_test_validations tv on ( tv.application_id = :P310_APP_ID_DESTINATION AND 
                                              tv.result_identifier = ac.n002 and 
                                              tv.test_id = ac.n001)
        where collection_name = 'ST_TEST_RESULTS'
         and ( nvl(:P100_SHOW_STANDARDS_TREE,'A') = 'A'  
               OR ( :P100_SHOW_STANDARDS_TREE = 'F' AND ( c001 = 'N' AND nvl(tv.false_positive_yn, 'N') != 'Y' ) ) 
               OR ( :P100_SHOW_STANDARDS_TREE = 'P' AND ( c001 = 'Y' OR  nvl(tv.false_positive_yn, 'N')  = 'Y' ) ) 
               OR ( :P100_SHOW_STANDARDS_TREE = 'N' AND ( c001 = 'N' AND nvl(tv.false_positive_yn, 'N')  = 'Y' ) ) 
              ) ]';
      end if;
      return q'[select tp.status, 
             tp."LEVEL", 
             tp.title,
             case 
              when tp.change_flag = 'P' then 'fa fa-exclamation-triangle am-parent'
              when tp.change_flag = 'I' then 'fa fa-plus-square am-insert'
              when tp.change_flag = 'D' then 'fa fa-minus-square am-deleted'        
              when tp.change_flag = 'A' then 'fa fa-folder am_changed'
              else ''
             end icon,
             tp.call_id value, 
             tp.scope as tooltip, 
             tp.link 
      from (
      select case when connect_by_isleaf = 1 then 0
                  when level = 1             then 1
                  else                           -1
             end as status, 
             level, 
             case 
               when display_value is not null then procedure_name||'('||display_value||')' 
               else procedure_name
             end  title, 
             null as icon, 
             call_id, 
             scope, 
             change_flag,
             'javascript:setLeaf('||nvl(begin_line_no,0)||','||nvl(end_line_no,0)||','||call_id||','''||apex_id||''')' as link 
      from ( select * 
             from (select * 
                   from am_tree_procedures
                   where export_id = :P100_LEFT_EXPORT_ID 
                   and ((change_flag is not null and nvl(:P100_SHOW_CHANGES_ONLY_LEFT,'N')='Y') or nvl(:P100_SHOW_CHANGES_ONLY_LEFT,'N') !='Y')
                   )
             connect by prior parent_call_id=call_id
             start with APEX_ID in ( ]'||v_subquery||q'[ ) 
            ) 
      start with parent_call_id is null
      connect by prior call_id = parent_call_id
      order siblings by to_number(nvl(sort_value,begin_line_no))
      ) tp
      ]';
      ----
    end if;  
  end get_tree_query; 
  ------------------------------------------------------------------------------
  
  function b_acc_apex_developer_audit_log
  return boolean
  is
    v_dummy number;
  begin
    EXECUTE IMMEDIATE 
    'select 1 from apex_developer_audit_log where rownum <2'
    INTO v_dummy;
   
    return true; 
  exception
    when others then
      return false;
  end b_acc_apex_developer_audit_log;
  ------------------------------------------------------------------------------
  
  function c_acc_apex_developer_audit_log
  return varchar2
  is
  begin
    if b_acc_apex_developer_audit_log then
      return 'Y';
    else
      return 'N';
    end if;
  end c_acc_apex_developer_audit_log;
  ------------------------------------------------------------------------------
  
  function b_eba_stds_test_validations
  return boolean
  is
    v_dummy number;
  begin
    -- eba_stds_test_validations can be unavaliable
    -- but package should be comaliable
    EXECUTE IMMEDIATE 
    'select 1 from eba_stds_test_validations where rownum <2'
    INTO v_dummy;
   
    return true; 
  exception
    when others then
      return false;
  end b_eba_stds_test_validations;  
  ------------------------------------------------------------------------------
  
  function get_backup_date(p_backup_id in number)
  return date
  is
    v_backup_date date;
  begin
    -- am_app_backups can be unavaliable
    -- but package should be comaliable
    EXECUTE IMMEDIATE
    'select last_updated_on from am_app_backups where id = :BACKUP_ID' into v_backup_date using p_backup_id;
    return v_backup_date;
  --exception
    --when others then
      --return sysdate;
  end get_backup_date;
  ------------------------------------------------------------------------------
  
  function get_source(
    p_call_id am_tree_procedures.call_id%TYPE,
    p_export_id am_exports.export_id%TYPE
  )
  return clob
  is
    v_pos_from am_tree_procedures.pos_from%TYPE;
    v_pos_to   am_tree_procedures.pos_to%TYPE;
    v_clob     clob;
  begin
    select pos_from,
           pos_to  
    into v_pos_from,
         v_pos_to
    from am_tree_procedures
    where call_id = p_call_id
      and export_id = p_export_id;
    
    select dbms_lob.substr(content,v_pos_to - v_pos_from + 1,v_pos_from)
    into v_clob
    from AM_EXPORTS 
    where export_id = p_export_id;
    
    return v_clob;
  exception
    when no_data_found then
      return null;
  end get_source;
  
  
END am_app;
/
CREATE OR REPLACE PACKAGE BODY am_compare AS
 
 NULL_DATA constant varchar2(20 char) default '?ÄÖ?Ü&%&%$&%$&%Ö?';
 
 procedure compare_trees(
    p_left_export_id    IN am_exports.export_id%TYPE,
    p_right_export_id   IN am_exports.export_id%TYPE
 ) 
 is
 begin   
    -- insert difference in procedures    
    for a in (
      with l as (
        select ll.*,
               coalesce(to_char(ll.apex_id),path) as compare
        from (
        select tpl.*,
             sys_connect_by_path(nvl(to_char(apex_id),procedure_name),'/') path
          from (select * from am_tree_procedures 
                where export_id = p_left_export_id ) tpl
          start with parent_call_id is null
          connect by prior call_id = parent_call_id
          order siblings by to_number(nvl(sort_value,begin_line_no))
          )ll ),
      r as (
          select rr.*,
                 coalesce(to_char(rr.apex_id),path) as compare
          from (       
          select tpr.*,
                 sys_connect_by_path(nvl(to_char(apex_id),procedure_name),'/') path
          from (select * from am_tree_procedures 
                where export_id = p_right_export_id ) tpr
          start with parent_call_id is null
          connect by prior call_id = parent_call_id
          order siblings by to_number(nvl(sort_value,begin_line_no))
          ) rr )
      select  l.call_id as l_call_id,
              r.call_id as r_call_id,              
              nvl((select min(l.call_id) 
                  from l
                 where l.path = rtrim(regexp_substr(r.path,'^.+\/'),'/')
               ),r.parent_call_id) as parent_call_id,
              nvl(l.parent_apex_id,r.parent_apex_id) as parent_apex_id,
              --nvl(l.export_id,r.export_id) as export_id,
              nvl(l.procedure_name,r.procedure_name) as procedure_name,
              nvl(l.scope,r.scope) as scope,
              nvl(l.begin_line_no,r.begin_line_no) as begin_line_no,
              nvl(l.end_line_no,r.end_line_no) as end_line_no,
              nvl(l.sort_value,r.sort_value) as sort_value,
              nvl(l.display_value,r.display_value) as display_value,
              nvl(l.apex_id,r.apex_id) as apex_id
      from l full outer join r on l.compare = r.compare 
      where l.call_id is null or r.call_id is null
    ) loop
      if a.l_call_id is null then
        insert into am_tree_procedures (
          call_id,
          parent_call_id,
          parent_apex_id,
          export_id,
          procedure_name,
          scope,
          begin_line_no,
          end_line_no,
          sort_value,
          display_value,
          apex_id,
          change_flag
        ) values(
          a.r_call_id,
          a.parent_call_id,
          a.parent_apex_id,
          p_left_export_id,
          a. procedure_name,
          a.scope,
          a.begin_line_no,
          a.end_line_no,
          a.sort_value,
          a.display_value,
          a.apex_id,
          PROCEDURE_NEW
        );
      else
        update am_tree_procedures
        set change_flag = PROCEDURE_DELETED
        where call_id = a.r_call_id
         and export_id = p_left_export_id;
      end if;
    end loop;

    -- mark procedures with different parameters
    update am_tree_procedures
       set change_flag = DIFFERENT_PARAMETERS
     where change_flag is null
       and export_id = p_left_export_id
       and call_id  in (
      select distinct
             nvl(l.call_id,r.call_id) as call_id
      from (
      select pr.call_id,
             pr.apex_id,
             par.parameter_name,
             data_clob,
             data
      from am_tree_procedures pr, 
           am_tree_parameters par  
      where pr.export_id = p_left_export_id
        and par.export_id = p_left_export_id
        and pr.call_id = par.call_id
        and pr.apex_id is not null
      ) l full outer join 
      (
      select pr.call_id,
             pr.apex_id,
             par.parameter_name,
             data_clob,
             data
      from am_tree_procedures pr, 
           am_tree_parameters par  
      where pr.export_id = p_right_export_id
        and par.export_id = p_right_export_id
        and pr.call_id = par.call_id
        and pr.apex_id is not null
      ) r on (l.apex_id = r.apex_id and l.parameter_name = r.parameter_name)
      where (nvl(l.data,NULL_DATA) != nvl(r.data,NULL_DATA)) or 
              dbms_lob.compare(nvl(l.data_clob,'Null'),nvl(r.data_clob,'Null')) = -1
      );

    -- additionally mark all predecessors 
    update am_tree_procedures
    set change_flag = CHILD_HAS_CHANGES
    where change_flag is null
      and export_id = p_left_export_id
      and call_id  in (
        select call_id
        from am_tree_procedures
        where export_id = p_left_export_id
        start with call_id in (select call_id 
             from am_tree_procedures
            where export_id = p_left_export_id
              and change_flag is not null) 
        connect by prior parent_call_id = call_id);
    
    -- delete hanged leafs
    for t in (
    with l as (
      select tpl.*,
             sys_connect_by_path(nvl(to_char(apex_id),procedure_name),'/') path
          from (select * from am_tree_procedures 
                where export_id = p_left_export_id ) tpl
          start with parent_call_id is null
          connect by prior call_id = parent_call_id
          order siblings by to_number(nvl(sort_value,begin_line_no))
          ),
      r as (
          select tpr.*,
                 sys_connect_by_path(nvl(to_char(apex_id),procedure_name),'/') path
          from (select * from am_tree_procedures 
                where export_id = p_right_export_id ) tpr
          start with parent_call_id is null
          connect by prior call_id = parent_call_id
          order siblings by to_number(nvl(sort_value,begin_line_no))
          )
      select  l.call_id as l_call_id,
              r.call_id as r_call_id,  
              l.parent_call_id as l_par_call_id,
              r.parent_call_id as r_par_call_id
      from l full outer join r on l.apex_id = r.apex_id
      where --(l.call_id is null or r.call_id is null)
      l.path != r.path 
    ) 
    loop
      update  am_tree_procedures
      set parent_call_id = t.r_par_call_id
      where export_id = p_left_export_id 
      and call_id = t.l_call_id;

      delete from am_tree_procedures 
      where call_id = t.l_par_call_id
        and export_id = p_left_export_id;   
    end loop;
 end compare_trees;
 
END am_compare;
/
CREATE OR REPLACE
PACKAGE BODY AM_COMPARSIONS_API AS
  
  function to_bool(p_val varchar2)
  return boolean
  is
  begin
    if p_val= 'Y' then
      return true;
    else
      return false;
    end if;
  end to_bool;
  ------------------------------------------------------------------------------

  function add_application_from_file(    
    p_filename  in am_exports.filename%TYPE
  )
  return am_exports.export_id%TYPE
  is
    v_export_id  am_exports.export_id%TYPE;
    v_clob   clob;
    v_filename apex_application_temp_files.filename%TYPE;
  begin
    v_export_id  := am_export_id_seq.nextval;
  
    select filename,
           blob_content
    into   v_filename,
           v_clob
    from apex_application_temp_files
    where application_id = v('APP_ID')
      and name = p_filename;  
    
    
    insert into am_exports(
      export_id,
      filename,
      content,
      exp_date
    ) values (
      v_export_id,
      v_filename,
      v_clob,
      sysdate
    ); 
    
    if SQL%ROWCOUNT != 1 then
      raise_application_error(-20001,'File not found '||p_filename);
    end if;
    
    --am_utils.split_into_lines(v_export_id,v_clob);
    
    return   v_export_id;
  end add_application_from_file;  
  ------------------------------------------------------------------------------

  function add_application_from_backup(    
    p_backup_id in number
  )
  return am_exports.export_id%TYPE
  is
    v_export_id  am_exports.export_id%TYPE;
    v_clob   clob;
    v_filename apex_application_temp_files.filename%TYPE;
    v_mime_type apex_application_temp_files.mime_type%TYPE;
  begin
    v_export_id  := am_export_id_seq.nextval;
  
    select filename,
           APEX_ZIP.GET_FILE_CONTENT(
             p_zipped_blob => blob_content,
             p_file_name   => replace(filename,'.zip','.sql')
           ) as blob_content,
           mime_type
    into   v_filename,
           v_clob,
           v_mime_type
    from am_app_backups
    where id = p_backup_id;  
    
    insert into am_exports(
      export_id,
      filename,
      content,
      exp_date
    ) values (
      v_export_id,
      v_filename,
      v_clob,
      sysdate
    ); 
    
    --am_utils.split_into_lines(v_export_id,v_clob);
    
    return   v_export_id;
  end add_application_from_backup;
  ------------------------------------------------------------------------------
  
  function add_application_from_db(
    p_app_id   in number,
    p_public_reports in boolean,
    p_private_reports in boolean,
    p_report_subscriptions in boolean,
    p_translation in boolean,
    p_comments in boolean,
    p_original_ids in boolean
  ) 
  return am_exports.export_id%TYPE
  is
    v_export_id  am_exports.export_id%TYPE;
    v_files      apex_t_export_files;
  begin
    v_export_id  := am_export_id_seq.nextval;
    v_files := apex_export.get_application(
      p_application_id => p_app_id,
      p_with_date => true,
      p_with_ir_public_reports => p_public_reports,
      p_with_ir_private_reports => p_private_reports,
      p_with_ir_notifications => p_report_subscriptions,
      p_with_translations => p_translation,
      p_with_original_ids => p_original_ids,
      p_with_comments => p_comments
    );
    insert into am_exports(
      export_id,
      filename,
      content,
      exp_date
    ) values (
      v_export_id,
      v_files(1).name,
      v_files(1).contents,
      sysdate    
    ); 
  
    --am_utils.split_into_lines(v_export_id,v_files(1).contents);
    
    return v_export_id;
  end add_application_from_db;
  ------------------------------------------------------------------------------
  
  function upload_export (
    p_source in varchar2,
    p_filename   in am_exports.filename%TYPE,
    p_app_id   in number,
    p_public_reports in varchar2,
    p_private_reports in varchar2,
    p_report_subscriptions in varchar2,
    p_translation in varchar2,
    p_comments in varchar2,
    p_original_ids in varchar2,
    p_backup_id in number
  ) return  am_exports.export_id%TYPE
  is
    v_export_id  am_exports.export_id%TYPE;
  begin
    if p_source = 'F' then
       return add_application_from_file(    
         p_filename => p_filename
       );  
    elsif p_source = 'B' then
      return add_application_from_backup(    
        p_backup_id => p_backup_id
      );
    else
       return add_application_from_db(
         p_app_id   => p_app_id,
         p_public_reports => to_bool(p_public_reports),
         p_private_reports => to_bool(p_private_reports),
         p_report_subscriptions => to_bool(p_report_subscriptions),
         p_translation => to_bool(p_translation),
         p_comments => to_bool(p_comments),
         p_original_ids => to_bool(p_original_ids) 
       );      
     end if;
  end upload_export;
END am_COMPARSIONS_API;
/
create or replace PACKAGE BODY am_hierarchy AS
  
  function prepare_scope_path(
    p_export_id      IN am_exports.export_id%TYPE,
    p_scope          IN am_tree_procedures.scope%TYPE,     
    p_parent_call_id IN am_tree_procedures.parent_call_id%TYPE
  ) return am_tree_procedures.call_id%TYPE
  is
    v_call_id      am_tree_procedures.call_id%TYPE;    
    v_call_id_new  am_tree_procedures.call_id%TYPE;
    v_scope        varchar2(500);
  begin
    for i in (
      select level, regexp_substr(p_scope,'[^/]+',1,level) as tree_items
      from dual
      connect by LEVEL <= REGEXP_COUNT(p_scope ,'[/]') + 1
    ) 
    loop
      begin
         v_scope := v_scope||'/'||i.tree_items;
         select call_id
         into v_call_id
         from am_scope
         where scope = v_scope;
       exception
         when no_data_found then
           v_call_id_new := am_call_seq.nextval;
           insert into am_scope(
             call_id,
             procedure_name,
             scope
          )
          values (
            v_call_id_new,
            i.tree_items,
            v_scope
          );   
          INSERT INTO am_tree_procedures(
              call_id,
              parent_call_id,
              parent_apex_id,
              export_id,
              procedure_name,
              scope,
              begin_line_no,
              end_line_no,
              sort_value,
              display_value,
              apex_id
            ) 
            VALUES (
              v_call_id_new ,--call_id
              nvl(v_call_id,p_parent_call_id), --parent_call_id
              null, --parent_apex_id
              p_export_id, --export_id
              i.tree_items, --procedure_name
              null, --scope
              null, --begin_line_no
              null, --end_line_no
              null, --sort_value
              null, --display_value
              null --apex_id
            ); 
           v_call_id := v_call_id_new; 
       end; 
    end loop;
    return v_call_id;
  end prepare_scope_path;
  
  ------------------------------------------------------------------------------
  function prepare_local_scope_path(
    p_export_id      IN am_exports.export_id%TYPE,
    p_local_scope    IN am_api_procedures.scope%TYPE,
    p_parent_call_id IN am_tree_procedures.parent_call_id%TYPE    
  ) return am_tree_procedures.call_id%TYPE 
  is
    v_call_id      am_tree_procedures.call_id%TYPE;    
    v_call_id_dbg      am_tree_procedures.call_id%TYPE;
    v_parent_call_id am_tree_procedures.parent_call_id%TYPE; 
  begin
    v_parent_call_id := p_parent_call_id;
 
    for i in (
      select column_value as single_item
      from table(apex_string.split(p_local_scope,'/'))
      where column_value is not null
    ) 
    loop
      begin
        select (call_id),
               (call_id)
        into v_call_id,
             v_call_id_dbg
        from am_tree_procedures tp
        where export_id = p_export_id
          and parent_call_id = v_parent_call_id
          and procedure_name = ltrim(i.single_item,'0123456789');
/*
       if v_call_id !=  v_call_id_dbg then
         dbms_output.put_line('prepare_local_scope_path , v_parent_call_id='||v_parent_call_id);
       end if;
*/       
        v_parent_call_id := v_call_id;   
       exception
         when no_data_found then
           v_call_id := am_call_seq.nextval;
           INSERT INTO am_tree_procedures(
              call_id,
              parent_call_id,
              parent_apex_id,
              export_id,
              procedure_name,
              scope,
              begin_line_no,
              end_line_no,
              sort_value,
              display_value,
              apex_id
            ) 
            VALUES (
              v_call_id ,--call_id
              v_parent_call_id, --parent_call_id
              null, --parent_apex_id
              p_export_id, --export_id
              ltrim(i.single_item,'0123456789'), --procedure_name
              null, --scope
              null, --begin_line_no
              null, --end_line_no
              regexp_substr(i.single_item,'^\d+'), --sort_value
              null, --display_value
              null --apex_id
            ); 
           v_parent_call_id := v_call_id;
           
       when others then         
         --dbms_output.put_line('parent_call_id='||p_parent_call_id||' scope='||p_local_scope||' line='||am_tree.debug_info.line_no||' v_parent_call_id='||v_parent_call_id||' i.single_item='||i.single_item||' '||SQLERRM);
         raise_application_error(-20001,'parent_call_id='||p_parent_call_id||' scope='||p_local_scope||' line='||am_tree.debug_info.line_no||' '||SQLERRM);         
       end; 
    end loop;
    return v_call_id;
  exception
    when others then
      raise_application_error(-20001,'parent_call_id='||p_parent_call_id||' '||SQLERRM);
  end prepare_local_scope_path;  
  ------------------------------------------------------------------------------
  
  function get_execute_point(
    p_execution_point IN am_execution_points.execution_point%TYPE
  )
  return am_execution_points.scope%TYPE
  is   
    v_scope am_execution_points.scope%TYPE;
  begin
    select scope
    into v_scope
    from am_execution_points
    where execution_point = p_execution_point;
    
    return v_scope;
  exception
     when no_data_found then
       return null;
  end get_execute_point;  
  ------------------------------------------------------------------------------
  
  function get_default_parent_call_id (
    p_export_id      IN am_exports.export_id%TYPE,
    p_procedure_name IN am_tree_procedures.procedure_name%TYPE
  )  
  return am_tree_procedures.call_id%TYPE
  is
    v_call_id  am_tree_procedures.call_id%TYPE;
  begin
    v_call_id := am_tree.get_procedure_name_call_exists(p_procedure_name);
    if v_call_id is not null then
      return v_call_id;
    end if;
  
    select call_id
    into v_call_id
    from (       
    select call_id,
           begin_line_no
    from am_tree_procedures
    where export_id = p_export_id
      and procedure_name = p_procedure_name
    order by begin_line_no desc
    ) where rownum < 2;
    
    return v_call_id;
  exception
    when no_data_found then
        return null;
  end get_default_parent_call_id;
  ------------------------------------------------------------------------------
  
  function get_parent_call_id (
    p_export_id      IN am_exports.export_id%TYPE,
    p_parent_apex_id IN am_tree_procedures.apex_id%TYPE
  )  
  return am_tree_procedures.call_id%TYPE
  is
    v_call_id  am_tree_procedures.call_id%TYPE;
  begin
    select call_id
    into v_call_id
    from (       
    select call_id,
           begin_line_no
    from am_tree_procedures
    where export_id = p_export_id
      and apex_id = p_parent_apex_id
    order by begin_line_no desc
    ) where rownum < 2;
    
    return v_call_id;
  exception
    when no_data_found then
        return null;
  end get_parent_call_id;
  ------------------------------------------------------------------------------
  
  function get_parent(
    p_export_id      IN am_exports.export_id%TYPE,
    p_parent_procedure_name IN am_tree_procedures.procedure_name%TYPE,
    p_local_scope    IN am_tree_procedures.scope%TYPE,
    p_scope_par_val  IN am_tree_procedures.procedure_name%TYPE,  
    p_parent_call_id IN am_tree_procedures.parent_call_id%TYPE,
    p_parent_apex_id IN am_tree_procedures.apex_id%TYPE    
  ) return am_tree_procedures.call_id%TYPE
  is
    v_call_id  am_tree_procedures.call_id%TYPE;
    v_apex_id  am_tree_procedures.apex_id%TYPE;
    v_scope_sum varchar2(201 CHAR); 
  begin
    if p_parent_apex_id is not null then
    v_call_id := get_parent_call_id (
      p_export_id      => p_export_id,
      p_parent_apex_id => p_parent_apex_id
    );
    end if;
    if v_call_id is null and p_parent_procedure_name is not null then 
      v_call_id := get_default_parent_call_id (
        p_export_id      => p_export_id,
        p_procedure_name => p_parent_procedure_name
      );
    end if;  
    v_call_id := nvl(v_call_id,p_parent_call_id);
    
    if p_local_scope = '#BUTTONS#' then
      if p_scope_par_val = 'BODY' then
        v_scope_sum := '1Items';
      else
        v_scope_sum := '2Region Buttons';
      end if;
    elsif p_local_scope = '#PROCESSES#' then
      v_scope_sum := get_execute_point(
        p_execution_point => p_scope_par_val
      );
      v_scope_sum := nvl(v_scope_sum,p_scope_par_val)||'/'||'2Processes';
    elsif p_local_scope = '#COMPUTATIONS#' then
      v_scope_sum := get_execute_point(
        p_execution_point => nvl(p_scope_par_val,'AFTER_SUBMIT')
      );
      v_scope_sum := nvl(v_scope_sum,p_scope_par_val)||'/'||'3Computations';
    elsif p_local_scope = '#BRANCHES#' then
      v_scope_sum := get_execute_point(
        p_execution_point => p_scope_par_val
      );
      v_scope_sum := nvl(v_scope_sum,p_scope_par_val)||'/'||'1Branches';
    elsif p_local_scope = '#REGIONS#' then
      v_scope_sum := get_execute_point(
        p_execution_point => p_scope_par_val
      );
      v_scope_sum := nvl(v_scope_sum,'1Rendering/2Regions/'||p_scope_par_val);
    elsif p_scope_par_val is not null or p_local_scope is not null then 
      v_scope_sum := ltrim(rtrim(p_local_scope||'/'||p_scope_par_val,'/'),'/');
    end if;
    
    if v_scope_sum is not null then 
      v_call_id := prepare_local_scope_path(
        p_export_id      => p_export_id,
        p_local_scope    => v_scope_sum,
        p_parent_call_id => v_call_id
      );
    end if;
    
    return v_call_id;    
  end get_parent;  
  ------------------------------------------------------------------------------
  
  function get_region_display_point(
    p_export_id in am_exports.export_id%TYPE,
    p_placeholder in am_templates_display_points.placeholder%TYPE,      
    p_template_apex_id in am_templates.template_apex_id%TYPE
  ) return varchar2 
  is
    v_display_point varchar2(260 CHAR);
    v_placeholder am_templates_display_points.placeholder%TYPE;
  begin
    select sort_order||display_name
    into v_display_point
    from am_templates_display_points
    where export_id = p_export_id
      and template_apex_id = p_template_apex_id
      and placeholder = p_placeholder;
    
    return v_display_point;
  exception
     when no_data_found then
        begin 
          select scope
          into v_display_point
          from am_execution_points
          where execution_point = p_placeholder;
          
          return v_display_point;
        exception
          when no_data_found then
            return 'Invalid Position [Not Rendered]';     
        end;
  end get_region_display_point;
  ------------------------------------------------------------------------------
  
  function get_parent_region_call_id (
    p_export_id in am_exports.export_id%TYPE,
    p_parent_region_apex_id in am_tree_procedures.parent_apex_id%TYPE
  )  
  return am_tree_procedures.call_id%TYPE
  is
    v_call_id  am_tree_procedures.call_id%TYPE;
  begin
    select call_id 
    into v_call_id
    from am_tree_procedures
    where export_id = p_export_id
      and apex_id = p_parent_region_apex_id;
  
    return v_call_id;
  end get_parent_region_call_id;
  ------------------------------------------------------------------------------
  
  procedure align_create_page_procedure(
    p_call_id in am_tree_procedures.call_id%TYPE,
    p_export_id in am_exports.export_id%TYPE,
    p_parent_call_id in am_tree_procedures.call_id%TYPE
  )
  is
  begin
    update am_tree_parameters
    set call_id = p_parent_call_id
    where call_id = p_call_id
      and export_id = p_export_id;
    
    update am_tree_procedures
    set display_value = (select display_value 
                         from am_tree_procedures
                         where call_id = p_call_id
                           and export_id = p_export_id
                        )
    where call_id = p_parent_call_id
      and export_id = p_export_id;                    
    
    delete from am_tree_procedures
    where call_id = p_call_id
      and export_id = p_export_id;
  --exception
  --   when  others then
  --      raise_application_error(-20001,'p_call_id='||p_call_id||' p_parent_call_id='||p_parent_call_id);
  end align_create_page_procedure;  

END am_hierarchy;
/
CREATE OR REPLACE PACKAGE BODY am_standard_tracker AS
    
  CURSOR tests IS
  SELECT check_sql,
         ltrim(app_bind_variable, ':') app_bind_variable,
         link_type,
         id,
         name,
         failure_help_text
  FROM eba_stds_standard_tests;
  ------------------------------------------------------------------------

  function  cell (
    p_text IN VARCHAR2
  ) return varchar2 
  IS
  BEGIN
    return '<td class="t-Report-cell">' || p_text || '</td>';
  END cell;
  ------------------------------------------------------------------------
  
  function get_row_as_clob(
    l_cursor   in out nocopy    NUMBER,
    p_col_cnt in number
  )
  return clob
  is
    v_value  VARCHAR2(4000);
    v_clob clob;
  begin
    -- show other columns
    FOR c IN 3..p_col_cnt LOOP
      dbms_sql.column_value(l_cursor,c,v_value);
      v_clob := v_clob||cell(APEX_ESCAPE.HTML(v_value));
    END LOOP;
    return v_clob;
  end get_row_as_clob;
  ------------------------------------------------------------------------
    
  FUNCTION get_header(
    p_test_id     in number,
    p_test_name   in varchar2,
    p_header_html in varchar2,
    p_descr       in varchar2
  )
  return varchar2
  IS
    v_header varchar2(32767);
  BEGIN
    v_header := '<h2>' || APEX_ESCAPE.HTML(p_test_name) || '</h2>';
    /* 
    if v('APP_ALIAS') = 'STANDARDS_TRACKER' then   
      sys.htp.p('<a href="'||APEX_UTIL.PREPARE_URL(p_url => 'f?p=' ||v('APP_ID')|| ':14:'||v('APP_SESSION')||'::NO::P14_ID:'||p_test_id)||'">'||APEX_ESCAPE.HTML(p_descr) ||'</a>');
    else
      sys.htp.p('<a href="'||APEX_UTIL.PREPARE_URL(p_url => 'f?p=' ||v('APP_ID')|| ':7014:'||v('APP_SESSION')||'::NO::P7014_ID:'||p_test_id)||'">'||APEX_ESCAPE.HTML(p_descr) ||'</a>');
    end if;
    */
    v_header := v_header||'<div>'||APEX_ESCAPE.HTML(p_descr)||'</div>';
    v_header := v_header||'<table class="test-report t-Report-report">';    
    v_header := v_header||'<thead>';
    v_header := v_header||'<tr>';
    v_header := v_header||'<th class="t-Report-colHead status-column">Status</th>';
    v_header := v_header||'<th class="t-Report-colHead validation-column">Validation</th>';
    v_header := v_header||p_header_html;
    v_header := v_header||'</tr>';
    v_header := v_header||'</thead>';
    v_header := v_header||'<tbody>';
    
    return v_header;
  END get_header;
  ------------------------------------------------------------------------  
      
  PROCEDURE prepare_results (
      p_application_id     IN   NUMBER
    ) 
  IS
    l_cursor              NUMBER;
    l_feedback            NUMBER;
    col_cnt               INTEGER;
    l_rec_tab             dbms_sql.desc_tab;
    col_num               NUMBER;
    --v_value               VARCHAR2(4000);    
    v_test_result         VARCHAR2(1);
    v_apex_elmt_id        NUMBER;
    v_sql                 VARCHAR2(32000);
    v_header_html         VARCHAR2(32000);
    v_first_row           BOOLEAN;      
    v_value               VARCHAR2(4000);
    
  BEGIN
    if APEX_COLLECTION.COLLECTION_EXISTS ('ST_TEST_RESULTS') THEN
      APEX_COLLECTION.DELETE_COLLECTION('ST_TEST_RESULTS');
    end if;
    APEX_COLLECTION.CREATE_COLLECTION('ST_TEST_RESULTS');
    
    if APEX_COLLECTION.COLLECTION_EXISTS ('ST_TEST_RESULTS_HEADER') THEN
      APEX_COLLECTION.DELETE_COLLECTION('ST_TEST_RESULTS_HEADER');
    end if;
    APEX_COLLECTION.CREATE_COLLECTION('ST_TEST_RESULTS_HEADER');
  
    FOR c_tests IN tests LOOP
      v_first_row := null;
      
      v_sql := c_tests.check_sql;
      l_cursor := dbms_sql.open_cursor(2);
      begin
        dbms_sql.parse(l_cursor,c_tests.check_sql,dbms_sql.native);
        dbms_sql.describe_columns(l_cursor,col_cnt,l_rec_tab);
      exception
        when others then
          dbms_sql.close_cursor(l_cursor);
          --_!!!!return  ('Error by parsing <b>"'||c_tests.name||'"</b> test - '||SQLERRM);
      end;
  
      sys.dbms_sql.bind_variable(l_cursor,c_tests.app_bind_variable,p_application_id);
      dbms_sql.define_column(l_cursor,1,v_test_result,1);    
      IF col_cnt > 2 THEN --application test
        dbms_sql.define_column(l_cursor,2,v_apex_elmt_id);
      ELSE
        v_apex_elmt_id := p_application_id; 
      END IF;
      
      v_header_html := '';
      FOR j IN 3..col_cnt LOOP
        dbms_sql.define_column(l_cursor,j,v_value,4000);
        v_header_html := v_header_html|| 
          '<th class="t-Report-colHead">'||
          APEX_ESCAPE.HTML(initcap(replace(l_rec_tab(j).col_name, '_', ' ')))||
          '</th>';
      END LOOP;
  
      l_feedback := dbms_sql.execute(l_cursor);
      WHILE dbms_sql.fetch_rows(l_cursor) > 0 LOOP
        dbms_sql.column_value(l_cursor,1,v_test_result);
        IF col_cnt > 2 THEN --application test
          dbms_sql.column_value(l_cursor,2,v_apex_elmt_id);
        END IF;  
        
        if v_first_row is null then
          v_first_row := true;
          APEX_COLLECTION.ADD_MEMBER (
            p_collection_name => 'ST_TEST_RESULTS_HEADER',                 
            p_n001 => c_tests.id,
            p_clob001 => get_header(
              p_test_id     => c_tests.id,
              p_test_name   => c_tests.name,
              p_descr       => c_tests.failure_help_text,
              p_header_html => v_header_html
            )
          );
        else   
          v_first_row := false;
        end if;
            
        APEX_COLLECTION.ADD_MEMBER (
          p_collection_name => 'ST_TEST_RESULTS',
          p_c001 => v_test_result, 
          p_n001 => c_tests.id,
          p_n002 => v_apex_elmt_id,
          p_clob001 => get_row_as_clob(
            l_cursor => l_cursor,
            p_col_cnt => col_cnt 
          )
        );
          
      END LOOP;
      dbms_sql.close_cursor(l_cursor);
    END LOOP;
  END prepare_results;  
  ------------------------------------------------------------------------
  
  function get_report(
    p_apex_id in number, 
    p_application_id in number,
    p_showonly in varchar2
  )
  return clob
  is
    v_test_id  number;
    v_clob     clob;
    v_header varchar2(32767);
  begin
   for i in ( 
     select n001 as test_id,
            clob001 as row_,
            case 
               when c001 = 'Y' THEN 'Y'
               when nvl(tv.false_positive_yn,'*') = 'Y' THEN 'F'
               else 'N'
            end test_result,
            tv.updated,
            tv.updated_by
     from apex_collections ac left outer join 
          eba_stds_test_validations tv on ( tv.application_id = p_application_id AND 
                                            tv.result_identifier = ac.n002 and 
                                            tv.test_id = ac.n001)
     where collection_name = 'ST_TEST_RESULTS'
       and n002 = p_apex_id 
       and ( p_showonly IS NULL 
             OR ( p_showonly = 'F' AND ( c001 = 'N' AND nvl(tv.false_positive_yn, 'N') != 'Y' ) ) 
             OR ( p_showonly = 'P' AND ( c001 = 'Y' OR  nvl(tv.false_positive_yn, 'N')  = 'Y' ) ) 
             OR ( p_showonly = 'N' AND ( c001 = 'N' AND nvl(tv.false_positive_yn, 'N')  = 'Y' ) ) 
            ) 
     order by n001)
    loop
      if v_test_id is null or v_test_id != i.test_id then
        if v_test_id is not null then
          v_clob := v_clob||'</tbody></table>';
        end if;  
        -- do print header 
        select clob001
        into v_header
        from apex_collections
        where collection_name = 'ST_TEST_RESULTS_HEADER'
          and n001 = i.test_id;
        v_clob := v_clob||v_header;
        v_test_id := i.test_id;
      end if;
       v_clob := v_clob||'<tr>'||cell('<a href="javascript:void(0);" class="t-Button t-Button--' ||
          CASE
            WHEN i.test_result in ('Y','F')  THEN
             'success'
            ELSE 
             'warning'
          END|| ' t-Button--stretch">' ||
          CASE
            WHEN i.test_result = 'Y' THEN
              'Pass'
            WHEN i.test_result = 'F' THEN
              'False Negative'
            ELSE 
              'Fail'
          END|| '</a>'); 
      v_clob := v_clob||cell(
          CASE
            WHEN i.test_result = 'F' THEN
            '<a href="javascript:setValidate(''-'|| p_apex_id || ''','''||i.test_id||''');" ' || 'class="t-Button t-Button--success t-Button--stretch" title='''|| apex_util.get_since(i.updated) || ' by ' || apex_escape.html(i.updated_by)||' ''>Marked as Valid</a>'
            WHEN i.test_result = 'N' THEN
            '<a href="javascript:setValidate(''+' || p_apex_id || ''','''||i.test_id||''');" ' || 'class="t-Button t-Button--stretch">' || 'Mark as Valid</a>'
            ELSE '&nbsp;'
          END
        )||i.row_||'</tr>';      
    end loop;
    if v_clob is not null then 
     null;  
    end if;
    
    return v_clob;
  end get_report;
  
END am_standard_tracker;
/
CREATE OR REPLACE PACKAGE BODY am_tree AS

  type t_hierarchy_parent_prev is record (
    procedure_name am_tree_procedures.procedure_name%TYPE,
    scope_par_val  am_tree_procedures.procedure_name%TYPE,  
    parent_call_id am_tree_procedures.parent_call_id%TYPE,
    parent_apex_id  am_tree_procedures.apex_id%TYPE,
    call_id am_tree_procedures.call_id%TYPE
  );
  v_hierarchy_parent_prev t_hierarchy_parent_prev;
  
  type t_parent_procedure_name_call is table of am_tree_procedures.parent_call_id%TYPE index by am_tree_procedures.procedure_name%TYPE;
  v_parent_procedure_name_call t_parent_procedure_name_call;
  ------------------------------------------------------------------------------
  
  function get_procedure_name_call_exists(
    p_procedure_name am_tree_procedures.procedure_name%TYPE
  ) return am_tree_procedures.call_id%TYPE
  is
    v_call_id am_tree_procedures.call_id%TYPE;
  begin
    v_call_id := v_parent_procedure_name_call(p_procedure_name);
    return v_call_id;    
  exception
     when no_data_found then
        return null;
  end get_procedure_name_call_exists;
  
  ------------------------------------------------------------------------------
  FUNCTION get_api_procedure_data(
    p_procedure_name in am_api_procedures.procedure_name%TYPE
  ) return am_api_procedures%ROWTYPE
  IS
    r_api_procedures am_api_procedures%ROWTYPE;
  BEGIN
    select *
    into r_api_procedures
    from am_api_procedures
    where procedure_name = p_procedure_name;
    
    return r_api_procedures;
  EXCEPTION
    WHEN NO_DATA_FOUND then
       raise_application_error(-20001,'APEX API Procedure not found '||p_procedure_name);
  END get_api_procedure_data;
  ------------------------------------------------------------------------------
  
  function get_template_option_desc(
    p_export_id IN am_exports.export_id%TYPE,
    p_template_type in varchar2,
    p_template_options in varchar2
  )
  return varchar2
  is
    v_display_names am_tree_procedures.display_value%TYPE; 
  begin
    select substr(listagg(case 
                 when group_name is null then options
                 else group_name||'('||options||')'
               end,','),1,300) as opt
    into v_display_names           
    from (               
        select group_name,
               listagg(display_name,';') within group(order by 1) as options       
        from  (select display_name,
                      css_class,
                      (select display_name 
                       from am_template_opt_group tog
                       where tog.template_opt_group_apex_id = dto.template_opt_group_apex_id
                         and export_id = p_export_id
                       ) as group_name
               from am_template_options dto 
               where export_id = p_export_id
                 and theme_id  = app_properties.theme_id             
                 and template_apex_id = nvl(app_properties.page_template,template_apex_id)
                 and template_type = p_template_type       
               union
               select 'Default' as display_name,
                      '#DEFAULT#' as css_class,
                      '' as group_name 
               from dual       
               )  dto,
              (select column_value as css 
               from table(apex_string.split(p_template_options,':')) 
               ) css
        where dto.css_class = css.css
    group by group_name);
    
    --if length(p_template_options) > length('#DEFAULT#') and p_template_type = 'PAGE' then
    --  raise_application_error(-20001,'p_template_options='||p_template_options||' page_template='||app_properties.page_template||' p_template_type='||p_template_type);
    --end if;
    
    return v_display_names;
  exception
    when others then      
      raise_application_error(-20001,SQLERRM||'p_template_options='||p_template_options||' page_template='||app_properties.page_template||' p_template_type='||p_template_type||' theme_id='||app_properties.theme_id);  
  end get_template_option_desc;
  ------------------------------------------------------------------------------
  
  PROCEDURE get_clob_from_joined_string (    
    p_ref_cur IN t_refcur,
    p_clob IN OUT NOCOPY CLOB
  ) 
  is
    i        t_script_rec;
    v_string am_lines.text%TYPE;
  BEGIN
    LOOP
      FETCH p_ref_cur INTO i;
      EXIT WHEN p_ref_cur%notfound;
      IF i.text LIKE '%))'
      THEN
        p_clob := p_clob || ltrim(rtrim(i.text, '''))'), '''');
        EXIT;
      ELSE
        v_string := substr(i.text,2,length(i.text)-3);
        if v_string is not null then
         p_clob := p_clob || v_string ||chr(10);-- || '\\n';
        end if; 
      END IF;
    END LOOP;
  END get_clob_from_joined_string;
  ------------------------------------------------------------------------------
  
  FUNCTION get_proc_display_value(
    p_apex_id IN am_tree_procedures.apex_id%TYPE,
    p_export_id IN am_exports.export_id%TYPE
  ) return am_tree_procedures.display_value%TYPE
  IS
    v_display_value  am_tree_procedures.display_value%TYPE;
  BEGIN
    select display_value
    into v_display_value
    from am_tree_procedures
    where export_id = p_export_id
      and apex_id = p_apex_id
      and rownum < 2;
       --because create_row_template_patch and create_row_template have the same IDs
    return v_display_value;
  EXCEPTION
    when no_data_found then
       return '';
    when others then
       raise_application_error(-20001,'p_apex_id='||p_apex_id||' '||SQLERRM);
  END get_proc_display_value;  
  ------------------------------------------------------------------------------
  
  function get_page_template(
    p_export_id        IN   am_exports.export_id%TYPE
  )
  return am_templates_display_points.template_apex_id%TYPE
  is
    v_page_template_id am_themes.default_page_template_id%TYPE;
  begin
    if app_properties.page_template is not null then
      v_page_template_id := app_properties.page_template;
    else
      select case 
               when app_properties.page_mode ='MODAL' then default_dialog_template_id
               else default_page_template_id 
             end page_template_id
      into v_page_template_id       
      from am_themes
      where theme_id = app_properties.theme_id
       and export_id = p_export_id;
    end if;
    
    return v_page_template_id;
  end get_page_template;
  ------------------------------------------------------------------------------

  PROCEDURE convert_pocedure_call (
    p_procedure_name   IN   am_tree_procedures.procedure_name%TYPE,
    p_ref_cur          IN   t_refcur,
    p_parent_call_id   IN   am_tree_procedures.parent_call_id%TYPE,
    p_export_id        IN   am_exports.export_id%TYPE,
    p_block_scope      IN   am_tree_procedures.scope%TYPE,  
    p_pos_from         IN   am_tree_procedures.pos_from%TYPE
  ) 
  IS
    i                  t_script_rec;
    v_parameter_name   am_tree_parameters.parameter_name%TYPE;
    v_parameter_type   am_tree_parameters.parameter_type%TYPE;
    v_value            VARCHAR2(4000 CHAR);
    v_clob             CLOB;
    v_sort_value       am_tree_procedures.sort_value%TYPE;
    v_display_value    am_tree_procedures.display_value%TYPE;
    v_display_data     am_tree_parameters.display_data%TYPE;
    v_scope_par_value  am_tree_procedures.procedure_name%TYPE; 
    v_call_id          am_tree_procedures.call_id%TYPE;
    v_current_parent_call_id   am_tree_procedures.parent_call_id%TYPE;
    v_parent_call_id   am_tree_procedures.parent_call_id%TYPE;
    v_parent_apex_id   am_tree_procedures.parent_apex_id%TYPE;    
    v_apex_id          am_tree_procedures.apex_id%TYPE;
    v_begin_line_no    am_lines.line_no%TYPE;
    v_par_begin_line_no    am_lines.line_no%TYPE;
    v_end_line_no      am_lines.line_no%TYPE;
    r_api_procedures   am_api_procedures%ROWTYPE;    
    a_parameters       t_paramets;
    a_clob_parameters  t_clob_paramets;
    v_pos_to           NUMBER;
    TYPE t_am_tree_parameters IS TABLE OF am_tree_parameters%ROWTYPE;
    v_am_tree_parameters t_am_tree_parameters;
    ----------------------------------------------------------------------------
    
    function get_parameter(p_parameter in am_tree_parameters.parameter_name%TYPE)
    return am_tree_parameters.data%type
    is
    begin
      return am_utils.get_parameter(
        p_parameter => p_parameter,
        p_parameters => a_parameters
      );
    end get_parameter;
    
    function get_clob_parameter(p_parameter_name in VARCHAR2)
    return am_tree_parameters.data_clob%type
    is    
    begin
      return a_clob_parameters(p_parameter_name);
    exception
       when no_data_found  then
         return get_parameter(p_parameter_name);
         --raise_application_error(-20001,'No value found for '||p_parameter_name);
    end get_clob_parameter;

  BEGIN
    v_am_tree_parameters := t_am_tree_parameters();
    v_parent_call_id := p_parent_call_id;
    v_current_parent_call_id := p_parent_call_id;

    v_call_id := am_call_seq.nextval;
    if v_parent_procedure_name_call.exists(p_procedure_name) then
      v_parent_procedure_name_call(p_procedure_name) := v_call_id;
    end if;
    
    r_api_procedures := get_api_procedure_data(p_procedure_name);
    LOOP
      FETCH p_ref_cur INTO i;
      IF p_ref_cur%notfound OR i.text LIKE ');'
      THEN
        v_end_line_no := i.line_no;
        v_pos_to := i.pos_to;
        EXIT;
      END IF;
      
      debug_info.line_no := i.line_no;
      
      IF v_begin_line_no IS NULL THEN 
        v_begin_line_no := i.line_no -1;
      END IF;
      
      v_par_begin_line_no := i.line_no;
      v_parameter_type := '';
      v_parameter_name := '';
      v_value := '';
      v_clob := '';
      
      IF i.text LIKE ',p_%' OR i.text LIKE ' p_%' THEN -- parameter
        v_parameter_name := am_utils.get_parameter_name(i.text);        
        IF instr(i.text, 'wwv_flow_api.id') > 0 THEN
          v_value := regexp_substr(i.text,'wwv_flow_api.id[(]((\d+))[)]',1,1,'',1);          
          v_display_data := get_proc_display_value(
            p_apex_id => v_value,
            p_export_id => p_export_id
          );
          v_parameter_type := 'I';
        ELSIF instr(i.text, 'wwv_flow_string.join') > 0 THEN
          get_clob_from_joined_string(
            p_ref_cur => p_ref_cur,
            p_clob => v_clob
           );
          a_clob_parameters(v_parameter_name) := v_clob;
          v_value := substr(v_clob,1,4000);
          v_display_data := substr(v_value,1,300);
          v_parameter_type := 'T';
        ELSIF instr(i.text, 'wwv_flow.g_flow_id') > 0 THEN 
          --v_value := 'g_flow_id';
-- !!!!          
          v_value := -1;
          v_display_data := '-1';
        ELSE
          v_value := substr(i.text, instr(i.text, '=>') + 2);
          v_value := rtrim(ltrim(v_value, ''''), '''');
          v_display_data := substr(v_value,1,300);
        END IF; 
        
        -- special parameters
        IF v_parameter_name = 'P_ID' THEN
          v_apex_id := am_utils.to_num(
            p_str => v_value,
            p_line_no => i.line_no
          );
          v_parameter_type := 'P';
          v_display_data := substr(v_value,1,300);
        ELSIF v_parameter_name = r_api_procedures.order_parameter_name THEN 
          v_sort_value := substr(v_value,1,30);
        ELSIF v_parameter_name = r_api_procedures.display_parameter_name THEN 
          v_display_value := substr(v_value,1,300);
        ELSIF v_parameter_name = r_api_procedures.scope_parameter_name THEN
          v_scope_par_value := substr(v_value,1,100);
        ELSIF v_parameter_name = r_api_procedures.parent_parameter_name THEN 
          v_parent_apex_id := am_utils.to_num(
            p_str => v_value,
            p_line_no => i.line_no
          );          
          
        ELSIF p_procedure_name = 'CREATE_PAGE' and v_parameter_name = 'P_PAGE_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'PAGE',
            p_template_options => v_value
          );
        ELSIF p_procedure_name = 'CREATE_PAGE' and v_parameter_name = 'P_NAV_LIST_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'LIST',
            p_template_options => v_value
          );
        ELSIF p_procedure_name = 'CREATE_PAGE_BUTTON' and v_parameter_name = 'P_BUTTON_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'BUTTON',
            p_template_options => v_value
          );
        ELSIF p_procedure_name = 'CREATE_PAGE_ITEM' and v_parameter_name = 'P_ITEM_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'FIELD',
            p_template_options => v_value
          );
        ELSIF p_procedure_name = 'CREATE_PAGE_PLUG' and v_parameter_name = 'P_REGION_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'REGION',
            p_template_options => v_value
          );
        ELSIF p_procedure_name = 'CREATE_REPORT_REGION' and v_parameter_name = 'P_REGION_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'REPORT',
            p_template_options => v_value
          );
        ELSIF p_procedure_name = 'CREATE_USER_INTERFACE' and v_parameter_name = 'P_NAV_LIST_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'LIST',
            p_template_options => v_value
          );
        ELSIF p_procedure_name = 'CREATE_USER_INTERFACE' and v_parameter_name = 'P_NAV_BAR_TEMPLATE_OPTIONS' THEN
          v_display_data := get_template_option_desc(
            p_export_id => p_export_id,
            p_template_type => 'LIST',
            p_template_options => v_value
          );
        END IF;
        
        v_am_tree_parameters.extend;
        v_am_tree_parameters(v_am_tree_parameters.count).call_id := v_call_id; 
        v_am_tree_parameters(v_am_tree_parameters.count).export_id := p_export_id;
        v_am_tree_parameters(v_am_tree_parameters.count).parameter_name := v_parameter_name;
        v_am_tree_parameters(v_am_tree_parameters.count).data_clob := v_clob;
        v_am_tree_parameters(v_am_tree_parameters.count).data := v_value;
        v_am_tree_parameters(v_am_tree_parameters.count).display_data := v_display_data;
        v_am_tree_parameters(v_am_tree_parameters.count).begin_line_no := v_par_begin_line_no;
        v_am_tree_parameters(v_am_tree_parameters.count).end_line_no := i.line_no;
        v_am_tree_parameters(v_am_tree_parameters.count).parameter_type := v_parameter_type;        
        
        a_parameters(v_parameter_name) := v_value;
      END IF;  
    END LOOP;
    
    
    forall l_ind IN 1 .. v_am_tree_parameters.count 
    insert into am_tree_parameters 
    values v_am_tree_parameters(l_ind);
    
    --!!!
    /*
    if r_api_procedures.scope_parameter_name is not null and v_scope_par_value is null then
       dbms_output.put_line('<'||r_api_procedures.scope_parameter_name||'/'||i.line_no||'>');
    end if;
    */
    
    IF p_procedure_name = 'CREATE_PAGE_PLUG' then
       if get_parameter('P_PARENT_PLUG_ID') is not null then
         v_current_parent_call_id := am_hierarchy.get_parent_region_call_id (
           p_export_id => p_export_id,
           p_parent_region_apex_id => get_parameter('P_PARENT_PLUG_ID')
         );
         v_parent_call_id := v_current_parent_call_id;
       else
         v_current_parent_call_id := p_parent_call_id;
         v_scope_par_value := nvl(am_hierarchy.get_region_display_point(
              p_export_id => p_export_id,
              p_placeholder => get_parameter('P_PLUG_DISPLAY_POINT'),      
              p_template_apex_id => get_page_template(p_export_id => p_export_id) 
            ),v_scope_par_value);
          v_parent_call_id := am_hierarchy.get_parent(
            p_export_id      => p_export_id,
            p_parent_procedure_name => r_api_procedures.parent_procedure_name,
            p_local_scope    => r_api_procedures.scope,
            p_scope_par_val  => v_scope_par_value,
            p_parent_call_id => v_current_parent_call_id,
            p_parent_apex_id => v_parent_apex_id
          );   
       end if;
    else
      if v_hierarchy_parent_prev.procedure_name = p_procedure_name and
         v_hierarchy_parent_prev.scope_par_val = v_scope_par_value and
         v_hierarchy_parent_prev.parent_call_id = v_current_parent_call_id and
         v_hierarchy_parent_prev.parent_apex_id = v_parent_apex_id 
      then
         v_parent_call_id :=  v_hierarchy_parent_prev.call_id;      
      else
        v_parent_call_id := am_hierarchy.get_parent(
          p_export_id      => p_export_id,
          p_parent_procedure_name => r_api_procedures.parent_procedure_name,
          p_local_scope    => r_api_procedures.scope,
          p_scope_par_val  => v_scope_par_value,
          p_parent_call_id => v_current_parent_call_id,
          p_parent_apex_id => v_parent_apex_id
        );
        v_hierarchy_parent_prev.procedure_name := p_procedure_name;
        v_hierarchy_parent_prev.scope_par_val := v_scope_par_value;
        v_hierarchy_parent_prev.parent_call_id := v_current_parent_call_id;
        v_hierarchy_parent_prev.parent_apex_id := v_parent_apex_id;
        v_hierarchy_parent_prev.call_id := v_parent_call_id;
      end if;  
    end if;
    
    if regexp_instr(r_api_procedures.order_parameter_name,'^\d+') > 0 then
      v_sort_value := r_api_procedures.order_parameter_name;
    end if;
  
    INSERT INTO am_tree_procedures(
      call_id,
      parent_call_id,
      parent_apex_id,
      export_id,
      procedure_name,
      scope,
      begin_line_no,
      end_line_no,
      pos_from,
      pos_to,
      sort_value,
      display_value,
      apex_id
    ) 
    VALUES (
      v_call_id ,--call_id
      nvl(v_parent_call_id,p_parent_call_id), --parent_call_id
      v_parent_apex_id, --parent_apex_id
      p_export_id, --export_id
      p_procedure_name, --procedure_name
      p_block_scope, --scope
      v_begin_line_no, --begin_line_no
      v_end_line_no, --end_line_no
      p_pos_from,
      v_pos_to,
      nvl(v_sort_value,to_char(v_apex_id)), --sort_value
      v_display_value, --display_value
      v_apex_id --apex_id
    );
    IF p_procedure_name = 'CREATE_TEMPLATE_OPTION' then  
        am_utils.save_template_option(
          p_export_id => p_export_id,
          p_theme_id => get_parameter('P_THEME_ID'),
          p_display_name => get_parameter('P_DISPLAY_NAME'),
          p_css_class => get_parameter('P_CSS_CLASSES'),
          p_template_apex_id => coalesce(get_parameter('P_PAGE_TEMPLATE_ID'),
                                coalesce(get_parameter('P_REGION_TEMPLATE_ID'),
                                coalesce(get_parameter('P_REPORT_TEMPLATE_ID'),
                                coalesce(get_parameter('P_BREADCRUMB_TEMPLATE_ID'),
                                coalesce(get_parameter('P_LIST_TEMPLATE_ID'),
                                coalesce(get_parameter('P_FIELD_TEMPLATE_ID'),
                                get_parameter('P_BUTTON_TEMPLATE_ID'))))))),
          p_template_type => get_parameter('P_TEMPLATE_TYPES'),
          p_template_opt_group_apex_id => get_parameter('P_GROUP_ID')
        );
    elsif p_procedure_name = 'CREATE_TEMPLATE_OPT_GROUP' then
        am_utils.save_template_opt_group(
          p_export_id => p_export_id,
          p_theme_id => get_parameter('P_THEME_ID'),
          p_display_name => get_parameter('P_DISPLAY_NAME'),
          p_template_opt_group_apex_id => get_parameter('P_ID')
        );
    elsif p_procedure_name = 'CREATE_THEME' then
      am_utils.save_theme(
        p_export_id => p_export_id,
        p_theme_id => get_parameter('P_THEME_ID'),
        p_default_page_template => get_parameter('P_DEFAULT_PAGE_TEMPLATE'),
        p_default_dialog_template => get_parameter('P_DEFAULT_DIALOG_TEMPLATE') 
      );
    elsif p_procedure_name = 'CREATE_TEMPLATE' then  
      am_utils.save_template(
        p_export_id => p_export_id,
        p_template_apex_id => get_parameter('P_ID'), 
        p_header  => get_clob_parameter('P_HEADER_TEMPLATE'),
        p_box  => get_clob_parameter('P_BOX'),
        p_footer  => get_clob_parameter('P_FOOTER_TEMPLATE')
      );
    elsif p_procedure_name = 'CREATE_PAGE_TMPL_DISPLAY_POINT' then  
      am_utils.save_templates_display_points(
        p_export_id => p_export_id,
        p_display_name => get_parameter('P_NAME'),
        p_placeholder => get_parameter('P_PLACEHOLDER'),      
        p_template_apex_id => get_parameter('P_PAGE_TEMPLATE_ID')
      );
    elsif p_procedure_name = 'IMPORT_BEGIN' then
      app_properties.app_id := get_parameter('P_DEFAULT_APPLICATION_ID');
    elsif p_procedure_name = 'CREATE_USER_INTERFACE' then
      if get_parameter('P_IS_DEFAULT') = 'true' then 
        app_properties.theme_id := get_parameter('P_THEME_ID');
      end if;
    elsif p_procedure_name = 'CREATE_PAGE' then
      app_properties.page_id := get_parameter('P_ID');
      app_properties.page_mode := get_parameter('P_PAGE_MODE');
      app_properties.page_template := get_parameter('P_STEP_TEMPLATE');
      
      am_hierarchy.align_create_page_procedure(
        p_call_id => v_call_id,
        p_export_id => p_export_id,
        p_parent_call_id => nvl(v_parent_call_id,p_parent_call_id)
      );      
    end if;
    --DBMS_LOB.FREETEMPORARY(v_clob);
    
  END convert_pocedure_call;
  ------------------------------------------------------------------------------
  
  PROCEDURE convert_execute (
    p_procedure_name  IN   am_tree_procedures.procedure_name%TYPE,
    p_ref_cur         IN   t_refcur,
    p_parent_call_id  IN   am_tree_procedures.parent_call_id%TYPE,
    p_export_id       IN   NUMBER,
    p_scope           IN   VARCHAR2,
    p_begin_line_no   IN   am_lines.line_no%TYPE,
    p_begin_line      IN   am_lines.text%TYPE   
  ) IS
    i                  t_script_rec;
    v_block_lines      CLOB;
    v_begin_line_no    am_lines.line_no%TYPE;
    v_end_line_no      am_lines.line_no%TYPE;
  BEGIN
    v_begin_line_no := p_begin_line_no;   
    v_block_lines := p_begin_line;
    v_end_line_no := p_begin_line_no;
    LOOP
      FETCH p_ref_cur INTO i;
      IF p_ref_cur%notfound OR i.text LIKE 'end;' THEN
        EXIT;
      END IF;
      v_end_line_no := i.line_no;
      v_block_lines := v_block_lines || i.text;
    END LOOP;  
    INSERT INTO am_tree_procedures(
      call_id,
      parent_call_id,
      parent_apex_id,
      export_id,
      procedure_name,
      scope,
      begin_line_no,
      end_line_no,
      sort_value,
      display_value,
      apex_id
    ) 
    VALUES (
      am_call_seq.nextval ,--call_id
      p_parent_call_id, --parent_call_id
      null, --parent_apex_id
      p_export_id, --export_id
      p_procedure_name, --procedure_name
      p_scope, --scope
      v_begin_line_no, --begin_line_no
      v_end_line_no, --end_line_no
      null, --sort_value
      'execute', --display_value
      null --apex_id
    );
    
  END convert_execute;
  ------------------------------------------------------------------------------
  
  PROCEDURE convert_block (
    p_ref_cur         IN   t_refcur,
    p_parent_call_id  IN   am_tree_procedures.parent_call_id%TYPE,
    p_export_id       IN   NUMBER,
    p_block_scope     IN   VARCHAR2
  ) IS
    i                  t_script_rec;
    v_procedure_name   VARCHAR2(300);    
    v_parent_call_id   am_tree_procedures.parent_call_id%TYPE;
  BEGIN

    v_parent_call_id := am_hierarchy.prepare_scope_path(
      p_export_id      => p_export_id,
      p_scope          => p_block_scope,
      p_parent_call_id => p_parent_call_id
    );
    
    LOOP
      FETCH p_ref_cur INTO i;
      IF p_ref_cur%notfound OR i.text LIKE 'end;' THEN
        EXIT;
      END IF;

      IF i.text LIKE 'wwv_flow_api.%' THEN
        v_procedure_name := upper(ltrim(regexp_substr(i.text, '[.][[:alnum:]_]+', 1, 1, 'i'), '.'));
        
        IF i.text LIKE '%;' THEN
          convert_execute (
            p_procedure_name   => v_procedure_name,
            p_ref_cur          => p_ref_cur,
            p_parent_call_id   => v_parent_call_id,
            p_export_id        => p_export_id,
            p_scope            => p_block_scope,
            p_begin_line_no    => i.line_no,
            p_begin_line       => i.text   
          );
            EXIT;
        ELSE
          convert_pocedure_call(
            p_procedure_name   => v_procedure_name,
            p_ref_cur          => p_ref_cur,
            p_parent_call_id   => v_parent_call_id,
            p_export_id        => p_export_id,
            p_block_scope      => p_block_scope,
            p_pos_from         => i.pos_from 
          );
        END IF;
      END IF;
    END LOOP;
  END convert_block;
  ------------------------------------------------------------------------------

  PROCEDURE fill_tree(
    p_export_id IN   am_exports.export_id%TYPE
  )
  IS
    v_comments        VARCHAR2(32676);
    v_block_scope     am_tree_procedures.scope%TYPE;
    c_script_cur      t_refcur;
    i                 t_script_rec;
    v_seq_id          NUMBER;
    dummy_app_properties t_app_properties;
    dummy_template_opt_group t_template_opt_group;
    v_parent_procedure_name_call_e  t_parent_procedure_name_call;
    v_clob             CLOB; 
  BEGIN    
    -- clear pl/sql table
    v_parent_procedure_name_call := t_parent_procedure_name_call();
    for b in (
      select distinct parent_procedure_name
      from am_api_procedures
      where parent_procedure_name is not null
    ) loop
      v_parent_procedure_name_call(b.parent_procedure_name) := NULL;
    end loop;
        
    
    app_properties := dummy_app_properties;
    template_opt_group := dummy_template_opt_group; 
    
    v_seq_id := am_call_seq.nextval;
    INSERT INTO am_tree_procedures (
      call_id,
      parent_call_id,
      export_id,
      procedure_name,
      scope,
      begin_line_no,
      end_line_no,
      sort_value,
      apex_id,
      parent_apex_id    
    ) VALUES (
      v_seq_id, --call_id
      null, --parent_call_id
      p_export_id, --export_id
      'ROOT',  --procedure_name
      null, --scope
      null, --begin_line_no,
      null, --end_line_no,
      null, --sort_value
      null, --apex_id
      null --parent_apex_id
    );

    select content
    into v_clob 
    from am_exports
    where export_id = p_export_id;
    
    OPEN c_script_cur FOR 
    SELECT line_no,
           text,
           pos_from,
           pos_to
    FROM table(am_utils.split_into_lines_pipeline(v_clob));
    
    LOOP
      BEGIN
        FETCH c_script_cur INTO i;
        EXIT WHEN c_script_cur%notfound;
        IF i.text LIKE 'begin%' THEN
          convert_block(
            p_ref_cur         => c_script_cur,
            p_parent_call_id  => v_seq_id,
            p_export_id       => p_export_id,
            p_block_scope     => nvl(v_block_scope,'ROOT') 
          );
          v_comments := NULL;
        ELSIF i.text LIKE 'prompt --%'THEN
          v_block_scope := regexp_replace(i.text,'^prompt --','');        
        ELSE
          v_comments := v_comments || i.text || chr(10);
        END IF;
--      EXCEPTION
--        when others then
--          raise_application_error(-20001,'fill_tree: line_no='||i.line_no||' '||SQLERRM);
      END;
    END LOOP;
    
  END fill_tree;
  

END am_tree;
/

